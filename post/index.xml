<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Spring Cloud</title>
    <link>https://www.springcloud.io/post/</link>
    <description>Recent content in Posts on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jun 2022 16:23:52 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processing the Response Body in Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-06/spring-cloud-gateway-response-body/</link>
      <pubDate>Wed, 29 Jun 2022 16:23:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-cloud-gateway-response-body/</guid>
      <description>1. Introduction In this tutorial, we&amp;rsquo;ll look at how we use Spring Cloud Gateway to inspect and/or modify the response body before sending it back to a client.
2. Spring Cloud Gateway Quick Recap Spring Cloud Gateway, or SCG for short, is a sub-project from the Spring Cloud family that provides an API gateway built on top of a reactive web stack. We&amp;rsquo;ve already covered its basic usage in earlier tutorials, so we won&amp;rsquo;t get into those aspects here.</description>
    </item>
    
    <item>
      <title>Bulk Update With Spring Data MongoDB Reactive</title>
      <link>https://www.springcloud.io/post/2022-06/bulk-update-with-spring-data-mongodb-reactive/</link>
      <pubDate>Wed, 22 Jun 2022 22:55:50 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/bulk-update-with-spring-data-mongodb-reactive/</guid>
      <description>In order to update documents in a MongoDB collection, we often use update requests, if the volume of data is too large, it could lead to performance issues and overconsumption of hardware resources.
We will implement a solution to enrich and update efficiently a large amount of data using Spring Data MongoDB Reactive.
Before continuing the reading, if you are not familiar with Spring reactive stack and MongoDB, I suggest you to check the resources section.</description>
    </item>
    
    <item>
      <title>Spring Transaction Best Practices</title>
      <link>https://www.springcloud.io/post/2022-06/spring-transaction-best-practices/</link>
      <pubDate>Wed, 22 Jun 2022 18:14:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-transaction-best-practices/</guid>
      <description>Introduction In this article, I&amp;rsquo;m going to show you various Spring Transaction Best Practices that can help you achieve the data integrity guarantees required by the underlying business requirements.
Data integrity is of paramount importance because, in the absence of proper transaction handling, your application could be vulnerable to race conditions that could have terrible consequences for the underlying business.
Emulating the Flexcoin race condition In this article, I explained how Flexcoin went bankrupt because of a race condition that was exploited by some hackers who managed to steal all BTC funds Flexcoin had available.</description>
    </item>
    
    <item>
      <title>Tencent officially opens source Spring Cloud Tencent, creating a one-stop microservices solution</title>
      <link>https://www.springcloud.io/post/2022-06/spring-cloud-tencent/</link>
      <pubDate>Tue, 21 Jun 2022 16:50:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-cloud-tencent/</guid>
      <description>Recently, Spring Cloud Tencent was officially open sourced on June 14, as Tencent&amp;rsquo;s open source one-stop microservice framework, Spring Cloud Tencent implements Spring Cloud standard microservice SPI, developers can quickly develop Spring Cloud microservice architecture applications based on Spring Cloud Tencent. As Tencent&amp;rsquo;s open source one-stop microservice framework, Spring Cloud Tencent implements the Spring Cloud standard microservice SPI, which allows developers to quickly develop Spring Cloud microservice architecture applications based on Spring Cloud Tencent.</description>
    </item>
    
    <item>
      <title>SpringSecurity - Getting information about a logged-in user in a sub-thread</title>
      <link>https://www.springcloud.io/post/2022-06/spring-security-inheritablethreadlocal/</link>
      <pubDate>Tue, 14 Jun 2022 13:40:35 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-security-inheritablethreadlocal/</guid>
      <description>If you want to get the login user information in Spring Security, you can&amp;rsquo;t get it in a child thread, only in the current thread. One important reason for this is that the SecurityContextHolder stores user information in ThreadLocal by default.
However, the SecurityContextHolder actually defines three storage policies.
1 2 3 4 5 6 7  public class SecurityContextHolder { public static final String MODE_THREADLOCAL = &amp;#34;MODE_THREADLOCAL&amp;#34;; public static final String MODE_INHERITABLETHREADLOCAL = &amp;#34;MODE_INHERITABLETHREADLOCAL&amp;#34;; public static final String MODE_GLOBAL = &amp;#34;MODE_GLOBAL&amp;#34;; .</description>
    </item>
    
    <item>
      <title>Some Faq about OAuth2</title>
      <link>https://www.springcloud.io/post/2022-06/oauth2-faq/</link>
      <pubDate>Thu, 09 Jun 2022 16:50:42 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/oauth2-faq/</guid>
      <description>About OAuth2, I believe many beginners have some questions. This article has collected these questions into a QA, which may help OAuth2 learners.
FAQ   What are the common scenarios for OAuth2?
OAuth2 is mainly used for API authorization, which is a solution for authorization between cross API services. It is suitable for single sign-on (SSO), authorization authentication between microservices, API open platform and other scenarios.
  What is the OAuth2 client?</description>
    </item>
    
    <item>
      <title>SpringBoot With Spring Data Jpa</title>
      <link>https://www.springcloud.io/post/2022-06/springboot-jpa/</link>
      <pubDate>Wed, 08 Jun 2022 09:55:57 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/springboot-jpa/</guid>
      <description>This article teaches you how to quickly integrate and use Spring Data Jpa in your SpringBoot applications.
 This tutorial uses MYSQL as an example. If you use other databases, e.g. PostgreSQL, then you need to modify the jdbc driver, database, dialect and other related configurations.
 Practice Required Maven dependencies The required dependencies are as follows.
 HikariCP mysql-connector-java spring-boot-starter-data-jpa  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>How to get the auto-incremented ID when using JdbcTemplate</title>
      <link>https://www.springcloud.io/post/2022-06/jdbctemplate-id/</link>
      <pubDate>Mon, 06 Jun 2022 16:47:44 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/jdbctemplate-id/</guid>
      <description>This article will teach you how to get auto-incrementing IDs when using JdbcTemplate or NamedParameterJdbcTemplate.
Table (MYSQL) Suppose the following data table is available.
1 2 3 4 5 6 7 8 9 10  CREATETABLE`user`(`id`intunsignedNOTNULLAUTO_INCREMENTCOMMENT&amp;#39;ID&amp;#39;,`balance`decimal(10,2)DEFAULTNULL,`create_at`timestampNOTNULLDEFAULTCURRENT_TIMESTAMP,`enabled`tinyintunsignedNOTNULL,`name`varchar(50)CHARACTERSETutf8mb4COLLATEutf8mb4_general_ciNOTNULL,`update_at`timestampNULLDEFAULTNULL,PRIMARYKEY(`id`),UNIQUEKEY`name`(`name`))ENGINE=InnoDBAUTO_INCREMENT=11DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_general_ciCOMMENT=&amp;#39;user&amp;#39;;  As you can see, the id field is an auto-incrementing column.
JdbcTemplate spring-jdbc provides the GeneratedKeyHolder object to get the auto-incremented ID value after data insertion.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  package io.</description>
    </item>
    
    <item>
      <title>Spring Announces Spring Security OAuth Reaches End of Life</title>
      <link>https://www.springcloud.io/post/2022-06/spring-security-oauth-discontinued/</link>
      <pubDate>Thu, 02 Jun 2022 11:17:01 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-security-oauth-discontinued/</guid>
      <description>The Spring Security team has officially announced that Spring Security OAuth has reached the end of its life with the termination of maintenance.
The home page of the official website has now been highlighted to alert the complete cessation of maintenance.
The old Spring Security OAuth project is terminated to 2.5.2.RELEASE version, and there will be no further iterations of the project, including Bug fixes. We have previously warned that the project will soon be discontinued for maintenance, and those who were paying attention have already migrated.</description>
    </item>
    
    <item>
      <title>Spring Cloud Stream RabbitMQ Message Retry</title>
      <link>https://www.springcloud.io/post/2022-06/spring-cloud-stream-rabbitmq/</link>
      <pubDate>Thu, 02 Jun 2022 10:32:57 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/spring-cloud-stream-rabbitmq/</guid>
      <description>When using Spring Cloud Stream Rabbit, if a consumer throws an exception during consumption. You can re-consume the message in several ways.
Option 1 (default) When the consumer side throws an exception while processing a message, then the default will be Retry for 3 times in the current thread. this option is the default and can be modified by modifying the configuration file and specifying the parameters under channel, e.g.</description>
    </item>
    
    <item>
      <title>It&#39;s time to get ready for Spring Boot 3.0</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-3-0/</link>
      <pubDate>Tue, 31 May 2022 08:38:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-3-0/</guid>
      <description>On February 28, 2018 Spring Boot enters the 2.0 era, more than 4 years ago. in November 2022 Spring Boot 3.0 will be officially released, it will be based on Spring Framework 6.0 and will require Java 17 or higher, and it will be the first Spring for Jakarta EE 9 Boot version for Jakarta EE 9. There are still six months left for developers to transition to Spring Boot</description>
    </item>
    
    <item>
      <title>The core knowledge of OIDC certification authorization</title>
      <link>https://www.springcloud.io/post/2022-05/oidc-core/</link>
      <pubDate>Mon, 30 May 2022 09:07:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/oidc-core/</guid>
      <description>OIDC is an authentication layer based on OAuth2, so that the client knows the authorized End User, and provides a user&amp;rsquo;s authentication information Id Token while the client gets access_token. Widely used in microservices, open platforms, SSO, three-party login authorization and other scenarios.
OIDC key terms  EU Abbreviation for End User, which refers to an end user. RP Abbreviation for Relying Party, which refers to the trusted client in OAuth2, the consumer of authentication and authorization information.</description>
    </item>
    
    <item>
      <title>SpringCloud project transformed into Spring Cloud Kubernetes project</title>
      <link>https://www.springcloud.io/post/2022-05/spring-cloud-kubernetes/</link>
      <pubDate>Fri, 27 May 2022 19:13:07 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/spring-cloud-kubernetes/</guid>
      <description>K8S(kubernetes) Kubernetes is an open source for managing containerized applications on multiple hosts in a cloud platform. The goal of Kubernetes is to make deploying containerized applications simple and efficient (powerful), Kubernetes provides a mechanism for application deployment, planning, updating, and maintenance. A core feature of Kubernetes is the ability to autonomously manage containers to ensure that the containers in the cloud platform are running according to the user&amp;rsquo;s expectations</description>
    </item>
    
    <item>
      <title>Voters and voting mechanism for permission management in SpringSecurity</title>
      <link>https://www.springcloud.io/post/2022-05/spring-security-accessdecisionvoter/</link>
      <pubDate>Fri, 27 May 2022 17:49:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/spring-security-accessdecisionvoter/</guid>
      <description>When a user wants to access a protected resource in Spring Security, the user has some roles and the access to the resource requires some roles. The voting machine and voting mechanism are used when comparing the roles the user has with the roles the resource requires.
When a user wants to access a resource, the voter votes for or against the resource based on the user&amp;rsquo;s role, and the voting is based on the results of the voter.</description>
    </item>
    
    <item>
      <title>Spring Authorization Server 0.3.0 released, official documentation officially online</title>
      <link>https://www.springcloud.io/post/2022-05/spring-authorization-server-030/</link>
      <pubDate>Thu, 26 May 2022 10:25:00 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/spring-authorization-server-030/</guid>
      <description>Spring Authorization Server 0.3.0 was officially released today, and there are some highlights in this update.
Documentation Released The documentation for Spring Authorization Server has been officially released with this update and is now available on the Spring website.
Documentation: https://spring.io/projects/spring-authorization-server
The document currently contains the following important modules.
  Project Overview: an introduction and a list of features.
  Getting Help: Examples, FAQs and issues.
  Getting Started: System requirements, dependencies, and a guide to developing your first application.</description>
    </item>
    
    <item>
      <title>Spring Boot 2.6 &#43; Swagger startup exception: because &#34;this.condition&#34; is null</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-swagger/</link>
      <pubDate>Thu, 26 May 2022 09:17:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-swagger/</guid>
      <description>I tried to upgrade Spring Boot version to 2.6 and got an exception on startup.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  Caused by: java.lang.NullPointerException: Cannot invoke &amp;#34;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&amp;#34; because &amp;#34;this.condition&amp;#34; is null at springfox.documentation.spring.web.WebMvcPatternsRequestConditionWrapper.getPatterns(WebMvcPatternsRequestConditionWrapper.java:56) ~[springfox-spring-webmvc-3.0.0.jar:3.0.0] at springfox.documentation.RequestHandler.sortedPaths(RequestHandler.java:113) ~[springfox-core-3.0.0.jar:3.0.0] at springfox.documentation.spi.service.contexts.Orderings.lambda$byPatternsCondition$3(Orderings.java:89) ~[springfox-spi-3.0.0.jar:3.0.0] at java.base/java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:473) ~[na:na] at java.</description>
    </item>
    
    <item>
      <title>Preparing for Spring Boot 3.0</title>
      <link>https://www.springcloud.io/post/2022-05/springboot3/</link>
      <pubDate>Wed, 25 May 2022 09:28:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot3/</guid>
      <description>Spring Boot 2.0 was the first release in the 2.x line and was published on Feburary 28th 2018. We&amp;rsquo;ve just released Spring Boot 2.7 which means that, so far, we&amp;rsquo;ve been maintaining the 2.x line for just over 4 years. In total we&amp;rsquo;ve published 95 distinct releases over that timeframe!
The entire Spring team, and many in our community of contributors, are nosw preparing for the next generation of Spring. We are planning to release Spring Boot 3.</description>
    </item>
    
    <item>
      <title>Several ways to execute code after SpringBoot starts</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-start-listen/</link>
      <pubDate>Sun, 22 May 2022 11:43:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-start-listen/</guid>
      <description>We often need to do some hook actions when the container starts, such as registering message consumers, listening to configurations, etc. Today we will summarize the 7 startup extensions that SpringBoot leaves to developers. Container refresh completion extension point 1.ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; Anyone familiar with Spring must know that a successful container refresh means that all Bean initialization has been completed, and when the container is refreshed Spring will call the onApplicationEvent</description>
    </item>
    
    <item>
      <title>Spring Boot 2.7.0 released, 2.5 no longer maintained</title>
      <link>https://www.springcloud.io/post/2022-05/sringboot-release/</link>
      <pubDate>Fri, 20 May 2022 08:26:04 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/sringboot-release/</guid>
      <description>These days are &amp;ldquo;Spring Release Days&amp;rdquo;, with many Spring artifacts releasing new versions, Spring Framework 6.0.0 released its 4th milestone release, which includes all fixes for 5.3.20, as well as 39 fixes and improvements specific to the 6.0 branch. And yesterday Spring Boot 2.7.0 and several branches of Spring Security were released, especially Spring Boot 2.7.0 which is a very important release.
Spring Boot 2.7.0 The most important thing yesterday was the release of Spring Boot 2.</description>
    </item>
    
    <item>
      <title>Spring Boot With Spring Hateoas</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-hateoas/</link>
      <pubDate>Thu, 12 May 2022 13:54:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-hateoas/</guid>
      <description>HATEOAS is a principle to achieve the REST specification, by following the HATEOAS specification, we can solve the actual code to achieve a variety of individual problems. As the most popular framework for java Spring will of course not be absent from the integration of HATEOAS.
This article will explain how to use HATEOAS in SpringBoot through a specific example.
Our goal The HATEOAS rule returns data with links. Let&amp;rsquo;s take the familiar Book example to demonstrate this HATEOAS by first creating a Book entity.</description>
    </item>
    
  </channel>
</rss>
