<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Spring Cloud</title>
    <link>https://www.springcloud.io/post/</link>
    <description>Recent content in Posts on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Apr 2022 08:55:10 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ideas for integrating OAuth2 with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</link>
      <pubDate>Mon, 11 Apr 2022 08:55:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</guid>
      <description>Microservices to do user authentication and authorization has always been a difficult point, with the OAuth2.0 password mode was invalidated, it is even more difficult.This article will share some ideas.
Two ways of thinking There are usually two ways of thinking about authentication and authorization for microservices.
 All authentication authorization is handled by an independent user authentication authorization server, which is only responsible for issuing Token, and then the gateway is only responsible for forwarding requests to each microservice module, and each module of the microservice performs the verification process of Token by itself.</description>
    </item>
    
    <item>
      <title>BootstrapMode for JPA Repositories</title>
      <link>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</link>
      <pubDate>Sun, 10 Apr 2022 15:00:43 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</guid>
      <description>1. Introduction In this brief tutorial, we&amp;rsquo;ll focus on the different types of BootstrapMode for JPA repositories that Spring provides for altering the orchestration of their instantiation.
At startup, Spring Data scans for repositories and registers their bean definitions as singleton-scoped beans. During their initialization, repositories obtain an EntityManager immediately. Specifically, they get the JPA metamodel and validate declared queries.
JPA is bootstrapped synchronously by default. Consequently, the instantiation of repositories is blocked until the bootstrap process completes .</description>
    </item>
    
    <item>
      <title>Build a Spring Boot REST API with Full-Text Search using Hibernate Search</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-hibernate-search/</link>
      <pubDate>Sat, 09 Apr 2022 22:09:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-hibernate-search/</guid>
      <description>Search is one of the pillars of the web, and full-text search is one of the mandatory features that every website needs. But implementing such a feature is complex, and lots of skilled engineers have already thought hard about this topic. So let&amp;rsquo;s not reinvent the wheel, and use the battle-tested Hibernate Search library.
In this blog post, we are going to learn how to build a simple REST API endpoint in Spring boot with full-text search using Hibernate Search.</description>
    </item>
    
    <item>
      <title>Build a Spring Boot REST API with Pagination and Sorting</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-rest/</link>
      <pubDate>Sat, 09 Apr 2022 14:34:59 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-rest/</guid>
      <description>Pagination is an important feature for REST API, and is used for many use cases where we want to fetch only a small part of an entire dataset. It might be for performance reasons, and fetch only the data needed at that time. It can also be used by the frontend to display items using a paginated view type of UI such as infinite scrolling.
Spring Boot provides a pagination feature integrated into the spring data JPA library, making it easy to integrate such a mechanism in our own REST API.</description>
    </item>
    
    <item>
      <title>Pagination(with Hateoas), Filtering &amp; Sorting with Spring Boot and JPA</title>
      <link>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</link>
      <pubDate>Sat, 09 Apr 2022 14:17:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</guid>
      <description>Introduction In this blog post we are going to look at how we can implement pagination with hateoas while supporting filtering and sorting in a spring boot application. We will first start off implementing filtering, and then iteratively page, sorting and finally pagination wtih Hateoas.
Tech Stack Below are the list of languages, frameworks and libraries used in this tutorial
 Java 11 Maven h2 in memory database REST apis SpringBoot 2.</description>
    </item>
    
    <item>
      <title>Unified configuration management using Spring Cloud Config</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-config-usage/</link>
      <pubDate>Wed, 06 Apr 2022 13:21:07 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-config-usage/</guid>
      <description>1 Preface Configurability is a feature that a mature software system should provide, and configuration management is important for large systems, especially for microservices systems with multiple applications. Happily, Spring provides us with good configuration management, such as the powerful configuration of Springboot. For Spring Cloud, there is the powerful Spring Cloud Config which is very useful for distributed system configuration management by providing a configuration management outside the application,</description>
    </item>
    
    <item>
      <title>Getting Started with Data Flow Shell</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-dataflow-shell/</link>
      <pubDate>Tue, 05 Apr 2022 18:48:54 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-dataflow-shell/</guid>
      <description>1 Preface In the previous article about Spring Cloud Data Flow, the examples were operated through the UI. The Linux server environment generally uses the command line. The integration on Jenkins does not work with the UI either. The good thing is that the official Data Flow Shell tool is available and can be operated in command line mode, which is very convenient.
The Spring Cloud Data Flow Server provides an operational REST API, so the essence of this Shell tool is still to interact by calling the REST API.</description>
    </item>
    
    <item>
      <title>Getting Started with Spring Cloud Data Flow, Running in Local Mode</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-data-flow/</link>
      <pubDate>Tue, 05 Apr 2022 18:28:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-data-flow/</guid>
      <description>1 Preface What is Spring Cloud Data Flow, although it has been around for a while, I think many people don&amp;rsquo;t know about it, because few people use it in their projects. Not much information can be found online. Spring Cloud Data Flow is a microservices-based, specialized framework for streaming and batch data processing. 2 Basic concepts 2.1 Data Processing Modes There are two modes of data processing, Streaming and</description>
    </item>
    
    <item>
      <title>Solve the problem that SpringBoot fails to start after updating to 2.6.0</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</link>
      <pubDate>Mon, 04 Apr 2022 15:11:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</guid>
      <description>Problem Description SpringBoot project has integrated springfox. After updating SpringBoot to 2.6.0 the application fails to start and throws an exception: Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException.
The exception stack is as follows.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  Error starting ApplicationContext.</description>
    </item>
    
    <item>
      <title>4 solutions for selective injection when the interface has multiple implementations</title>
      <link>https://www.springcloud.io/post/2022-04/spring-selective-injection/</link>
      <pubDate>Mon, 04 Apr 2022 14:48:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-selective-injection/</guid>
      <description>1. Description of the problem In the actual system application development I often encounter such a class of requirements, and I believe that you will often encounter in your work. The same system is deployed in multiple provinces. A business in Beijing is one way of implementation, based on the needs of Beijing users. The same business is implemented in Shanghai in another way, much the same way as in</description>
    </item>
    
    <item>
      <title>Deadlock problem caused by improper use of ThreadPoolTaskExecutor</title>
      <link>https://www.springcloud.io/post/2022-04/spring-threadpool/</link>
      <pubDate>Sun, 03 Apr 2022 19:56:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-threadpool/</guid>
      <description>Spring comes with a thread pool is very convenient to use, but in relatively complex concurrent programming scenarios, the use of the scenario still requires careful consideration of the configuration, or you may encounter the pitfalls mentioned in this article. Specific code reference sample project 1. Overview ThredPoolTaskExcutor has 2 core configurations, one is the thread pool size and one is the queue size. The processing flow of ThredPoolTaskExcutor: New</description>
    </item>
    
    <item>
      <title>Spring Cache custom resolver</title>
      <link>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</link>
      <pubDate>Sat, 02 Apr 2022 17:42:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</guid>
      <description>This article introduces the custom cache resolver in spring, by customizing the resolver, you can add additional processing in spring&amp;rsquo;s cache annotation.
 Specific code reference example project
 1. Overview The cache-aside pattern is a commonly used cache usage pattern. The usage flow is as follows.
When the data in the database is updated, the cache is invalidated so that the latest data in the database can be read subsequently, making the cached data consistent with the database data.</description>
    </item>
    
    <item>
      <title>Problems encountered in migrating small microservices from Java to Kotlin and their solutions</title>
      <link>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</link>
      <pubDate>Sat, 02 Apr 2022 17:30:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</guid>
      <description>In this article, I would like to consider the problems and their solutions, which we encountered during the migration of our small microservice from Java to Kotlin.
Stack  Java 11 Spring Web MVC (в рамках Spring Boot) Spring Data JPA Map Struct Lombok Maven  Beginning Firstly, I would recommend anyone, who wants to put Kotlin in your project to start from tests. During this process, we configure almost all you need.</description>
    </item>
    
    <item>
      <title>Spring Boot integration groovy script</title>
      <link>https://www.springcloud.io/post/2022-04/spring-groovy/</link>
      <pubDate>Sat, 02 Apr 2022 14:39:17 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-groovy/</guid>
      <description>Introducing scripting capabilities into our application can be a good way to improve flexibility. Our core development work can be focused on the development of core platform capabilities, and scenario-specific functionality can be implemented through scripting. For example, jenkins can write pipelines through groovy scripts, which can be very flexible to customize the build process. spring itself provides a mechanism for groovy integration, divided into two ways, one is to use groovy development program, similar to the development with java, need to be compiled.</description>
    </item>
    
    <item>
      <title>Downgrading to Java 8 can also solve Spring Framework RCE</title>
      <link>https://www.springcloud.io/post/2022-04/spring-framework-rce-mitigation-alternative/</link>
      <pubDate>Fri, 01 Apr 2022 21:54:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-framework-rce-mitigation-alternative/</guid>
      <description>Yesterday we announced a Spring Framework RCE vulnerability CVE-2022-22965, listing Apache Tomcat as one of several preconditions. The Apache Tomcat team has since released versions 10.0.20 , 9.0.62 , and 8.5.78 all of which close the attack vector on Tomcat&amp;rsquo;s side. While the vulnerability is not in Tomcat itself, in real world situations, it is important to be able to choose among multiple upgrade paths that in turn provides flexibility and layered protection.</description>
    </item>
    
    <item>
      <title>Nacos Configuration Center Cluster Principle and Source Code Analysis</title>
      <link>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</link>
      <pubDate>Fri, 01 Apr 2022 16:55:53 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</guid>
      <description>Nacos, as a configuration center, necessarily needs to ensure high availability of service nodes, so how does Nacos implement clustering?
The following diagram, represents the deployment diagram of Nacos cluster.
How Nacos clusters work Nacos is an uncentralized node design in the cluster architecture as a configuration center. Since there are no master-slave nodes and no election mechanism, it is necessary to add virtual IPs (VIPs) in order to enable hot standby.</description>
    </item>
    
    <item>
      <title>Send a SOAP Object with Feign Client</title>
      <link>https://www.springcloud.io/post/2022-04/feign-send-soap/</link>
      <pubDate>Fri, 01 Apr 2022 16:22:41 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/feign-send-soap/</guid>
      <description>1. Overview Feign abstracts the HTTP calls and makes them declarative. By doing so, Feign hides the lower-level details like HTTP connection management, hardcoded-URLs, and other boilerplate code. The significant advantage of using Feign clients is that HTTP calls are made easy and eliminate a lot of code. Typically, we use the Feign for REST APIs application/json media type. However, the Feign clients work well with other media types like text/xml , multipart requests, etc.</description>
    </item>
    
    <item>
      <title>Spring Framework RCE, Early Announcement</title>
      <link>https://www.springcloud.io/post/2022-03/spring-framework-rce-early-announcement/</link>
      <pubDate>Thu, 31 Mar 2022 19:16:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-framework-rce-early-announcement/</guid>
      <description>Updates:
 [15:40 BST] Spring Boot 2.6.6 is available. [14:38 BST] Spring Boot 2.5.12 is available. [14:00 BST] CVE-2022-22965 is published. [13:03 BST] Added section &amp;ldquo;Misconceptions&amp;rdquo;. [12:34 BST] Added section &amp;ldquo;Am I Impacted&amp;rdquo;. [12:11 BST] Fix minor issue in the workaround for adding disallowedFields . [11:59 BST] Spring Framework versions 5.3.18 and 5.2.20 , which address the vulnerability, are now available. The release process for Spring Boot is in progress.  Overview I would like to announce an RCE vulnerability in the Spring Framework that was leaked out ahead of CVE publication.</description>
    </item>
    
    <item>
      <title>Spring cache source code analysis</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cache-source-code-analysis/</link>
      <pubDate>Thu, 31 Mar 2022 18:02:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cache-source-code-analysis/</guid>
      <description>Spring cache is a caching API layer that encapsulates common operations for a variety of caches and can easily add caching functionality to your application with the help of annotations. The common annotations are @Cacheable, @CachePut, @CacheEvict, ever wondered what is the principle behind them? With questions, after reading the source code of Spring cache, make a brief summary. First the conclusion, the core logic in the CacheAspectSupport class ,</description>
    </item>
    
    <item>
      <title>Complete Guide to Spring RestTemplate</title>
      <link>https://www.springcloud.io/post/2022-03/spring-resttemplate/</link>
      <pubDate>Thu, 31 Mar 2022 17:53:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-resttemplate/</guid>
      <description>REST-styled APIs are all around us. Many applications need to invoke REST APIs for some or all of their functions. Hence for applications to function gracefully, they need to consume APIs elegantly and consistently.
RestTemplate is a class within the Spring framework that helps us to do just that. In this tutorial, we will understand how to use RestTemplate for invoking REST APIs of different shapes.
Example Code This article is accompanied by a working code example on GitHub.</description>
    </item>
    
  </channel>
</rss>
