<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Spring Cloud</title>
    <link>https://www.springcloud.io/post/</link>
    <description>Recent content in Posts on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 May 2022 13:54:13 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot With Spring Hateoas</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-hateoas/</link>
      <pubDate>Thu, 12 May 2022 13:54:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-hateoas/</guid>
      <description>HATEOAS is a principle to achieve the REST specification, by following the HATEOAS specification, we can solve the actual code to achieve a variety of individual problems. As the most popular framework for java Spring will of course not be absent from the integration of HATEOAS.
This article will explain how to use HATEOAS in SpringBoot through a specific example.
Our goal The HATEOAS rule returns data with links. Let&amp;rsquo;s take the familiar Book example to demonstrate this HATEOAS by first creating a Book entity.</description>
    </item>
    
    <item>
      <title>Spring Security - Distinguishing login failure exceptions</title>
      <link>https://www.springcloud.io/post/2022-05/spring-security-badcredentialsexception/</link>
      <pubDate>Mon, 09 May 2022 20:35:29 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/spring-security-badcredentialsexception/</guid>
      <description>When we fail to log in, we may write the wrong username or the wrong password, but for security reasons, the server usually does not explicitly indicate whether the username or the password is wrong, but only gives a vague username or password error.
However, for many programmers, they may not be aware of the &amp;ldquo;unspoken rules&amp;rdquo; that may give the user a clear indication of whether the user name is wrong or the password is wrong.</description>
    </item>
    
    <item>
      <title>SpringBoot With Gson</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-gson/</link>
      <pubDate>Wed, 04 May 2022 17:35:33 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-gson/</guid>
      <description>Spring Boot uses Jackson by default as the serialization/deserialization framework for Json. But for me, I prefer Google&amp;rsquo;s Gson, which is much more concise. This article will teach you how to use Gson instead of Jackson in your Spring Boot application.
maven Spring Boot itself provides support for Gson, so you can import the Gson module directly without declaring a version number. If you are not using Jackson elsewhere, then you can exclude it from your project.</description>
    </item>
    
    <item>
      <title>How to rewrite a query in Spring Data JPA?</title>
      <link>https://www.springcloud.io/post/2022-05/rewrite-query-spring-data-jpa/</link>
      <pubDate>Tue, 03 May 2022 09:19:20 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/rewrite-query-spring-data-jpa/</guid>
      <description>Sometimes, no matter how many features you try to apply, it seems impossible to get Spring Data JPA to apply every thing you&amp;rsquo;d like to a query before it is sent to the EntityManager .
With 3.0.0-SNAPSHOT (and targeted for the next milestone release train of Spring Data), you now have the ability to get your hands on the query, right before it&amp;rsquo;s sent to the EntityManager and &amp;ldquo;rewrite&amp;rdquo; it. That is, you can make any alterations at the last moment.</description>
    </item>
    
    <item>
      <title>Spring application with Gzip compression</title>
      <link>https://www.springcloud.io/post/2022-05/resttemplate-gzip/</link>
      <pubDate>Mon, 02 May 2022 17:58:00 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/resttemplate-gzip/</guid>
      <description>Gzip is a compression encoding format. The server often compresses the response body by this encoding and then responds to the client, thus reducing the data size, increasing the transmission speed and saving bandwidth. The client then decompresses it by Gzip to get the original data. It consumes extra CPU resources because of the compression computation required.
Http Header &amp;amp; Encoding There are many other ways to encode similar to Gzip.</description>
    </item>
    
    <item>
      <title>Sorting rules for Spring Security filters</title>
      <link>https://www.springcloud.io/post/2022-05/spring-security-filters-sorting-rules/</link>
      <pubDate>Mon, 02 May 2022 13:05:23 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/spring-security-filters-sorting-rules/</guid>
      <description>How is the order of filters in HttpSecurity maintained? I think many developers are interested in this issue. In this article, I will discuss this issue with you. HttpSecurity contains a member variable FilterOrderRegistration, this class is a built-in filter registry. As for the role of these filters, not the focus of this article, interested to see the FilterOrderRegistration source code. Built-in filter order The FilterOrderRegistration maintains a variable filterToOrder</description>
    </item>
    
    <item>
      <title>Mapstruct&#39;s new Spring plugin</title>
      <link>https://www.springcloud.io/post/2022-05/mapstruct-spring-plugin/</link>
      <pubDate>Sun, 01 May 2022 19:43:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/mapstruct-spring-plugin/</guid>
      <description>Mapstruct it can replace BeanUtil to perform conversions between DTO, VO, PO. It uses the annotation processor mechanism of Java compilation period, to put it bluntly, it is a code generator, instead of you manually type conversion during the take value assignment operation. 1 2 3 4 5 @Mapper(componentModel = &amp;#34;spring&amp;#34;) public interface AreaMapping { List&amp;lt;AreaInfoListVO&amp;gt; toVos(List&amp;lt;Area&amp;gt; areas); } In just a few lines, a collection of PO is transformed</description>
    </item>
    
    <item>
      <title>spring cloud supports heterogeneous language microservices via sidecar</title>
      <link>https://www.springcloud.io/post/2022-04/springcloud-sidecar/</link>
      <pubDate>Sat, 30 Apr 2022 15:27:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/springcloud-sidecar/</guid>
      <description>1. Background spring cloud is the de facto standard for microservices in the java application world, it provides very rich and complete microservice components and is very easy to integrate with java applications. However, as many features of spring cloud are integrated into applications through java jar packages in the form of SDK calls (e.g. eureka client, spring cloud config client, etc.), applications developed in other languages (e.g. go, python,</description>
    </item>
    
    <item>
      <title>What are microservices?</title>
      <link>https://www.springcloud.io/post/2022-04/microservice/</link>
      <pubDate>Fri, 29 Apr 2022 08:52:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/microservice/</guid>
      <description>Microservice is a software architecture that is gaining more and more attention.
But what does it really mean? What kind of architecture can be called microservices?
There are many articles on the Internet, but they are too complicated for beginners to understand. In my opinion, the concept is actually very simple and can be understood in layman&amp;rsquo;s terms.
1. Monolithic Software To understand microservices, you first need to understand the evolution of software architecture.</description>
    </item>
    
    <item>
      <title>How to set SameSite property for Cookie in SpringBoot application?</title>
      <link>https://www.springcloud.io/post/2022-04/spring-samesite/</link>
      <pubDate>Wed, 27 Apr 2022 16:33:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-samesite/</guid>
      <description>Starting with Chrome 51, a new SameSite attribute has been added to the browser cookie to prevent CSRF attacks and user tracking.
1. What is a CSRF attack? Cookies are often used to store a user&amp;rsquo;s identity information, and a malicious website can manage to forge an HTTP request with the correct cookie, which is a CSRF attack.
For example, a user logs into the bank&amp;rsquo;s website your-bank.com and a cookie is sent from the bank&amp;rsquo;s server.</description>
    </item>
    
    <item>
      <title>How to send multipart/form-data requests via HttpClient</title>
      <link>https://www.springcloud.io/post/2022-04/httpclient-multipart/</link>
      <pubDate>Wed, 27 Apr 2022 11:24:34 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/httpclient-multipart/</guid>
      <description>HttpClient is a new client tool class provided by JDK11 under the java.net.http package. This article will teach you how to send multipart/form-data requests through HttpClient.
multipart/form-data The types in the MIME standard can be divided into two categories: standalone types and Multipart types.
Standalone type is a type that represents only a single file or media, indicating the classification of files for the transferred data. Examples include text, application, audio, image, video, etc.</description>
    </item>
    
    <item>
      <title>How to Handle Spring Security Exceptions</title>
      <link>https://www.springcloud.io/post/2022-04/spring-security-exceptions/</link>
      <pubDate>Tue, 26 Apr 2022 16:12:53 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-security-exceptions/</guid>
      <description>1. Overview In this article, we&amp;rsquo;ll have a look at how to handle Spring Security exceptions produced by our Spring Security Resource Server . To do so, we&amp;rsquo;ll also use a practical example where all the necessary configurations will be explained. First of all, let&amp;rsquo;s make a short introduction to Spring Security.
2. Spring Security Spring Security is a library that&amp;rsquo;s part of the Spring project. It tries to group all the functionalities of user access control on Spring projects .</description>
    </item>
    
    <item>
      <title>Defending against XSS attacks with Jsoup</title>
      <link>https://www.springcloud.io/post/2022-04/jsoup-xss/</link>
      <pubDate>Sun, 24 Apr 2022 13:46:24 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/jsoup-xss/</guid>
      <description>XSS An XSS attack is usually a clever way of injecting malicious command code into a web page by exploiting a vulnerability left in the web page&amp;rsquo;s development, causing the user to load and execute a malicious web program created by the attacker. These malicious web programs are usually JavaScript, but can actually include Java, VBScript, ActiveX, Flash, or even plain HTML, and when the attack is successful, the attacker may gain access to a variety of things including, but not limited to, higher privileges (such as performing certain actions), private web content, sessions, and cookies.</description>
    </item>
    
    <item>
      <title>Spring for GraphQL 1.0 RC1 Released</title>
      <link>https://www.springcloud.io/post/2022-04/spring-for-graphql-1-0-rc1-released/</link>
      <pubDate>Wed, 20 Apr 2022 19:19:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-for-graphql-1-0-rc1-released/</guid>
      <description>On behalf of everyone involved, I&amp;rsquo;m pleased to announce the availability of the first and final release candidate of Spring for GraphQL 1.0. We&amp;rsquo;re finally going to release a 1.0 version on May 17, the reference version for Spring Boot 2.7.0. We&amp;rsquo;ve shipped a few noteworthy changes and one important new feature in this release.
 Note: The Spring for GraphqL Boot starter is up-to-date with the changes discussed in this post and Spring Boot 2.</description>
    </item>
    
    <item>
      <title>CORS detailed explanation and how to configure in spring application</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cors/</link>
      <pubDate>Mon, 18 Apr 2022 16:42:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cors/</guid>
      <description>CORS explained in detail CORS is a W3C standard, the full name is Cross-origin resource sharing.
It allows the browser to cross-origin server, issued XMLHttpRequest/fetch request, thus overcoming the AJAX can only be used in the same source of the limitations.
1. Introduction CORS requires both browser and server support. Currently, all browsers support this feature, and Internet Explorer cannot be lower than IE10.
The entire CORS communication process is done automatically by the browser, without user involvement.</description>
    </item>
    
    <item>
      <title>Spring Security annotated access rights control combing</title>
      <link>https://www.springcloud.io/post/2022-04/spring-security-annotation/</link>
      <pubDate>Fri, 15 Apr 2022 17:08:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-security-annotation/</guid>
      <description>Spring Security provides annotation-based access control. turns on method annotation access control Spring Security turns off method annotations by default, to turn it on just add the @EnableGlobalMethodSecurity annotation. 1 2 3 4 5 6 7 8 9 10 /** * 开启方法安全注解 * * @author felord.cn */ @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true) public class MethodSecurityConfig { } @EnableGlobalMethodSecurity provides</description>
    </item>
    
    <item>
      <title>Spring Cloud - Disable Discovery Clients with Profiles</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-disable-discovery-clients/</link>
      <pubDate>Fri, 15 Apr 2022 15:28:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-disable-discovery-clients/</guid>
      <description>1. Overview In this tutorial, we&amp;rsquo;ll look at how to disable Spring Cloud&amp;rsquo;s Discovery Clients using profiles. This can be useful in situations where we want to enable/disable service discovery without making any changes to the code.
2. Set up Eureka Server and Eureka Client Let&amp;rsquo;s start by creating a Eureka Server and a Discovery Client.
First, we can set up our Eureka Server using Section 2 of the Spring Cloud Netflix Eureka tutorial.</description>
    </item>
    
    <item>
      <title>Spring Framework Data Binding Rules Vulnerability (CVE-2022-22968)</title>
      <link>https://www.springcloud.io/post/2022-04/spring-framework-data-binding-rules-vulnerability/</link>
      <pubDate>Wed, 13 Apr 2022 22:39:21 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-framework-data-binding-rules-vulnerability/</guid>
      <description>Overview While investigating the Spring Framework RCE vulnerability CVE-2022-22965 and the suggested workaround, we realized that the disallowedFields configuration setting on WebDataBinder is not intuitive and is not clearly documented. We have fixed that but also decided to be on the safe side and announce a follow-up CVE, in order to ensure application developers are alerted and have a chance to review their configuration.
 CVE-2022-22968: Spring Framework Data Binding Rules Vulnerability  We have released Spring Framework 5.</description>
    </item>
    
    <item>
      <title>Ideas for integrating OAuth2 with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</link>
      <pubDate>Mon, 11 Apr 2022 08:55:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</guid>
      <description>Microservices to do user authentication and authorization has always been a difficult point, with the OAuth2.0 password mode was invalidated, it is even more difficult.This article will share some ideas.
Two ways of thinking There are usually two ways of thinking about authentication and authorization for microservices.
 All authentication authorization is handled by an independent user authentication authorization server, which is only responsible for issuing Token, and then the gateway is only responsible for forwarding requests to each microservice module, and each module of the microservice performs the verification process of Token by itself.</description>
    </item>
    
    <item>
      <title>BootstrapMode for JPA Repositories</title>
      <link>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</link>
      <pubDate>Sun, 10 Apr 2022 15:00:43 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</guid>
      <description>1. Introduction In this brief tutorial, we&amp;rsquo;ll focus on the different types of BootstrapMode for JPA repositories that Spring provides for altering the orchestration of their instantiation.
At startup, Spring Data scans for repositories and registers their bean definitions as singleton-scoped beans. During their initialization, repositories obtain an EntityManager immediately. Specifically, they get the JPA metamodel and validate declared queries.
JPA is bootstrapped synchronously by default. Consequently, the instantiation of repositories is blocked until the bootstrap process completes .</description>
    </item>
    
  </channel>
</rss>
