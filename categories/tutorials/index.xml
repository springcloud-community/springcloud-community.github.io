<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorials on Spring Cloud</title>
    <link>https://www.springcloud.io/categories/tutorials/</link>
    <description>Recent content in tutorials on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Mar 2022 19:50:05 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resilience and Best Patterns</title>
      <link>https://www.springcloud.io/post/2022-03/resilience-and-best-patterns/</link>
      <pubDate>Mon, 28 Mar 2022 19:50:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/resilience-and-best-patterns/</guid>
      <description>Monolithic solutions or solutions where a single point of failure can derail an operation is a big problem. In products and platforms that target availability as an essential feature, this problem ends up creating major engineering challenges. This difficulty can be solved with a Microservices architecture. This architecture aims to: Make processes independent and managed in a unique way and without interdependence, so responsibilities are divided and decentralized, something very common in a distributed computing pattern.</description>
    </item>
    
    <item>
      <title>Logging MongoDB Queries with Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</link>
      <pubDate>Mon, 28 Mar 2022 15:37:23 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</guid>
      <description>1. Overview When using Spring Data MongoDB, we may need to log to a higher level than the default one. Typically, we may need to see, for example, some additional information such as statement executions or query parameters.
In this short tutorial, we&amp;rsquo;ll see how to modify the MongoDB logging level for queries.
2. Configure MongoDB Queries Logging MongoDB Support offers the MongoOperations interface or its primary MongoTemplate implementation to access data, so all we need is to configure a debug level for the MongoTemplate class.</description>
    </item>
    
    <item>
      <title>Send multipart/form-data requests using Resttemplate</title>
      <link>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</link>
      <pubDate>Mon, 28 Mar 2022 15:14:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</guid>
      <description>A multipart/form-data request can contain multiple sub-request bodies, each with its own separate header and body. Each sub-request body has its own separate header and body, and is typically used for file uploads. Here we use RestTemplate to send a multipart/form-data request.
RestTemplate It&amp;rsquo;s really simple, it&amp;rsquo;s all in the code.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  package io.</description>
    </item>
    
    <item>
      <title>Packaging SpringBoot applications with Docker</title>
      <link>https://www.springcloud.io/post/2022-03/springboot-docker/</link>
      <pubDate>Sat, 26 Mar 2022 17:39:32 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/springboot-docker/</guid>
      <description>Previously, we used Docker to build services related to the development environment, and also to build dependency services in the development and testing environment, and then also used Nexus to build Docker&amp;rsquo;s self-service, so this time we came together to deploy SpringBoot applications with Docker. Step by step to all the Dockerization march.
Build SpringBoot project The project is relatively simple, no data interaction, no complex business, just a print statement.</description>
    </item>
    
    <item>
      <title>Building Native Images with GraalVM and Spring Native on Apple&#39;s M1 Architecture</title>
      <link>https://www.springcloud.io/post/2022-03/graalvm-spring-native/</link>
      <pubDate>Thu, 24 Mar 2022 17:46:09 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/graalvm-spring-native/</guid>
      <description>It finally happened! They did it! They did it just in time for me to get on the road and start building applications on the road with my shiny new laptop, too! JOY!! Oracle and the GraalVM team released GraalVM and the GraalVM native image capability for Apple M1! I&amp;rsquo;ve been waiting for this day for so, so, so long! I bought the first Apple M1 the day of the announcement way back in 2020 (does anybody remember that far back?</description>
    </item>
    
    <item>
      <title>Notes on RabbitMQ with Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/notes-rabbitmq-spring-boot/</link>
      <pubDate>Wed, 23 Mar 2022 10:22:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/notes-rabbitmq-spring-boot/</guid>
      <description>Introduction Suppose our application organizes asynchronous domain logic inside DomainEventListener&amp;rsquo;s like the following code snippet.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  interface DomainEventListener { val topic: String fun handle(event: DomainEvent) } @Component class UserRegistered: DomainEventListener { override val topic = &amp;#34;user:registered&amp;#34; // How deserialization is performed is left out.  override fun handle(event: DomainEvent) { // perform business logic  } }   This post shows how to integrate these listeners with Spring AMQP by taking advantage of Spring&amp;rsquo;s infrastructure.</description>
    </item>
    
    <item>
      <title>Moving from Spring Cloud Netflix Zuul to Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/netflix-zuul-to-spring-cloud-gateway/</link>
      <pubDate>Tue, 22 Mar 2022 16:18:01 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/netflix-zuul-to-spring-cloud-gateway/</guid>
      <description>I&amp;rsquo;ve been using Netflix Zuul for many years as a proxy for APIs. Some weeks ago I tried to bootstrap a new project and add the zuul starter via spring initializr and couldn&amp;rsquo;t find it anymore. After some research it seems that Spring Cloud has moved over to Cloud Gateway and discontinued Netflix Zuul. Maybe this was just a rebranding of the Spring team but tbh I don&amp;rsquo;t care and want to follow the Spring Cloud team with that.</description>
    </item>
    
    <item>
      <title>Spring Security without the WebSecurityConfigurerAdapter</title>
      <link>https://www.springcloud.io/post/2022-03/spring-security-without-the-websecurityconfigureradapter/</link>
      <pubDate>Tue, 22 Mar 2022 10:27:35 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-security-without-the-websecurityconfigureradapter/</guid>
      <description>In Spring Security 5.7.0-M2 we deprecated the WebSecurityConfigurerAdapter , as we encourage users to move towards a component-based security configuration.
To assist with the transition to this new style of configuration, we have compiled a list of common use-cases and the suggested alternatives going forward.
In the examples below we follow best practice by using the Spring Security lambda DSL and the method HttpSecurity#authorizeHttpRequests to define our authorization rules. If you are new to the lambda DSL you can read about it in this blog post.</description>
    </item>
    
    <item>
      <title>Spring Cloud Introduction to Service Discovery Netflix Eureka</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cloud-introduction-to-service-discovery-netflix-eureka/</link>
      <pubDate>Mon, 21 Mar 2022 15:56:36 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cloud-introduction-to-service-discovery-netflix-eureka/</guid>
      <description>Micro-services are all good until they come with their distributed challenges which normally we don&amp;rsquo;t face in monolithic based applications. Just like this one!
Understanding the problem In order to fully get the main purpose of the solution let us first understand the underlying problem.
As the diagram above shows, we have to micro-services communicating via a certain network:
 Micro-service I with the IP address 10.10.10.10 , and port 8080 Micro-service II with the IP address 20.</description>
    </item>
    
    <item>
      <title>Messaging with RabbitMQ in Spring Boot Application</title>
      <link>https://www.springcloud.io/post/2022-03/messaging-using-rabbitmq-in-spring-boot-application/</link>
      <pubDate>Sun, 20 Mar 2022 14:31:45 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/messaging-using-rabbitmq-in-spring-boot-application/</guid>
      <description>In this article, we will learn about RabbitMQ and explore its common use-cases. We will also walk through a step-by-step guide to implement messaging using RabbitMQ in a Spring Boot Application and will see how to publish and consume messages in a queue using RabbitMQ. So, let&amp;rsquo;s begin learning!
What is a RabbitMQ? RabbitMQ is an open-source message broker that allows enterprise applications to communicate with each other. It&amp;rsquo;s a popular AMQP (Advanced Message Queuing Protocol)broker.</description>
    </item>
    
    <item>
      <title>Load Balanced Websockets with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/load-balanced-websockets-with-spring-cloud-gateway/</link>
      <pubDate>Fri, 18 Mar 2022 13:54:43 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/load-balanced-websockets-with-spring-cloud-gateway/</guid>
      <description>The ability to have real-time two-way communication between the client and the server is a key feature in most modern web apps.
A simple approach to setting up WebSockets in Spring Boot is covered in Simple WebSockets with Spring Boot, which uses an in-memory message broker. This approach falls short, though, when you scale up and add additional servers. Users connected to different servers would have no way of communicating or getting updates pushed to them for something that&amp;rsquo;s happened on another server.</description>
    </item>
    
    <item>
      <title>Spring Cloud Config Server - Encryption and Decryption</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cloud-config-server-encryption-and-decryption/</link>
      <pubDate>Thu, 17 Mar 2022 14:46:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cloud-config-server-encryption-and-decryption/</guid>
      <description>While using Spring Cloud Config Server, we also have the feature to encrypt sensitive information that is otherwise stored as plain text in our external git repository. This prevents anyone who has read access to the external repository from accessing confidential information and is highly highly recommended if you are using a Spring Cloud Config Server.
 Note: If you haven&amp;rsquo;t set up Spring Cloud Config Server yet check out my other article on how to set up a spring cloud config server.</description>
    </item>
    
    <item>
      <title>Spring Cloud Config Server: Step by Step</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cloud-config-server-step-by-step/</link>
      <pubDate>Thu, 17 Mar 2022 14:30:41 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cloud-config-server-step-by-step/</guid>
      <description>Spring Cloud Config Server is used to provide server-side and client-side support for externalized configuration in a distributed system. So when you have multiple microservices, and you want to easily control the configuration for all of them at one go - you&amp;rsquo;ll mostly be looking at Spring Cloud Config Server.
So how do we do this? We will create a git project which contains all your properties files for the multiple microservices that you have (easy enough).</description>
    </item>
    
    <item>
      <title>Spring Data JPA Query Method by Multiple Columns Example</title>
      <link>https://www.springcloud.io/post/2022-03/spring-data-jpa-query-method-by-multiple-columns-example/</link>
      <pubDate>Thu, 17 Mar 2022 14:17:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-data-jpa-query-method-by-multiple-columns-example/</guid>
      <description>In this tutorial, we will learn how to write a Spring Data JPA query method or finder method for multiple columns/fields.
Consider the following Product entity class and if we want to retrieve products by their name OR description fields then here is the Spring data JPA query method:
1  public List&amp;lt;Product&amp;gt; findByNameOrDescription(String name, String description);   Let&amp;rsquo;s create a complete example to understand end to end.
Maven Dependencies Create a Spring boot project and add the following maven dependencies to it:</description>
    </item>
    
    <item>
      <title>Spring Boot Integration Testing MySQL CRUD REST API Tutorial</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-integration-testing-mysql-crud-rest-api-tutorial/</link>
      <pubDate>Wed, 16 Mar 2022 16:54:51 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-integration-testing-mysql-crud-rest-api-tutorial/</guid>
      <description>In this tutorial, we will learn how to perform Integration testing Spring boot application using @SpringBootTest annotation.
We use MySQL database to store and retrieve the data.
Let&amp;rsquo;s first take a look at the overview of @SpringBootTest annotation.
@SpringBootTest Annotation Spring Boot provides @SpringBootTest annotation for Integration testing. This annotation creates an application context and loads the full application context.
@SpringBootTest will bootstrap the full application context, which means we can @Autowire any bean that&amp;rsquo;s picked up by component scanning into our test.</description>
    </item>
    
    <item>
      <title>URL Rewriting With Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cloud-gateway-url-rewriting/</link>
      <pubDate>Tue, 15 Mar 2022 19:20:41 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cloud-gateway-url-rewriting/</guid>
      <description>1. Introduction A common use case for the Spring Cloud Gateway is to act as a facade to one or more services, thus offering clients a simpler way to consume them.
In this tutorial, we&amp;rsquo;ll show different ways to customize the exposed APIs by rewriting the URLs before sending the request to the backends.
2. Spring Cloud Gateway Quick Recap The Spring Cloud Gateway project is built on top of the popular Spring Boot 2 and Project Reactor, so it inherits its main treats:</description>
    </item>
    
    <item>
      <title>Automatic decoding of request bodies via RequestBodyAdvice</title>
      <link>https://www.springcloud.io/post/2022-03/spring-mvc-decode-body/</link>
      <pubDate>Tue, 15 Mar 2022 15:10:17 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-mvc-decode-body/</guid>
      <description>The client encodes or encrypts the request body (e.g. AES encryption, Base64 encoding), and the server decodes the request body after receiving it. This is a very common requirement. Thanks to the RequestBodyAdvice interface provided by spring mvc. We can do this very easily and without modifying any code in the Controller. Practice The client&amp;rsquo;s request body is encoded using Base64 and the server automatically decodes it via RequestBodyAdvice. This</description>
    </item>
    
    <item>
      <title>Monitoring spring boot application logs online via WebSocket</title>
      <link>https://www.springcloud.io/post/2022-03/springboot-websocket-log/</link>
      <pubDate>Tue, 15 Mar 2022 12:08:07 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/springboot-websocket-log/</guid>
      <description>This article will teach you how to monitor spring boot application&amp;rsquo;s live logs online via websocket.
Create a project poml The spring-boot-starter-websocket dependency needs to be added.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76  &amp;lt;project xmlns=&amp;#34;http://maven.</description>
    </item>
    
    <item>
      <title>Use Aop &#43; SpEl to record more detailed request logs</title>
      <link>https://www.springcloud.io/post/2022-03/spel-aop-log/</link>
      <pubDate>Mon, 14 Mar 2022 17:02:24 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spel-aop-log/</guid>
      <description>Spring powerful expressions (SpEL) , you can dynamically access the properties of Java objects , call the object&amp;rsquo;s methods . In the request logging through Aop with SpEL can make the log information more detailed and flexible.
 This article will not explain the detailed techniques related to spel and aop. If you are not familiar with them, you can visit the official documentation to learn them.
 Practicing OperationLog Handler methods annotated with @OperationLog will be logged with detailed access logs.</description>
    </item>
    
    <item>
      <title>How to Record Request and Response Bodies in Sping Boot Applications</title>
      <link>https://www.springcloud.io/post/2022-03/record-request-and-response-bodies/</link>
      <pubDate>Mon, 14 Mar 2022 15:04:31 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/record-request-and-response-bodies/</guid>
      <description>In some scenarios, we need to log every client request and response log (including detailed body information).
As you know, streams can only be read once. If we read the request body first in order to log it, then spring&amp;rsquo;s HttpMessageConverter will throw an exception when it reads the request body again: org.springframework.http.converter. HttpMessageNotReadableException: Required request body is missing: ....
The following example demonstrates this situation.
The case of HttpMessageNotReadableException Filter for logging 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  package io.</description>
    </item>
    
  </channel>
</rss>
