<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorials on Spring Cloud</title>
    <link>https://www.springcloud.io/categories/tutorials/</link>
    <description>Recent content in tutorials on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Apr 2022 18:48:54 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Data Flow Shell</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-dataflow-shell/</link>
      <pubDate>Tue, 05 Apr 2022 18:48:54 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-dataflow-shell/</guid>
      <description>1 Preface In the previous article about Spring Cloud Data Flow, the examples were operated through the UI. The Linux server environment generally uses the command line. The integration on Jenkins does not work with the UI either. The good thing is that the official Data Flow Shell tool is available and can be operated in command line mode, which is very convenient.
The Spring Cloud Data Flow Server provides an operational REST API, so the essence of this Shell tool is still to interact by calling the REST API.</description>
    </item>
    
    <item>
      <title>Getting Started with Spring Cloud Data Flow, Running in Local Mode</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-data-flow/</link>
      <pubDate>Tue, 05 Apr 2022 18:28:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-data-flow/</guid>
      <description>1 Preface What is Spring Cloud Data Flow, although it has been around for a while, I think many people don&amp;rsquo;t know about it, because few people use it in their projects. Not much information can be found online. Spring Cloud Data Flow is a microservices-based, specialized framework for streaming and batch data processing. 2 Basic concepts 2.1 Data Processing Modes There are two modes of data processing, Streaming and</description>
    </item>
    
    <item>
      <title>Solve the problem that SpringBoot fails to start after updating to 2.6.0</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</link>
      <pubDate>Mon, 04 Apr 2022 15:11:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</guid>
      <description>Problem Description SpringBoot project has integrated springfox. After updating SpringBoot to 2.6.0 the application fails to start and throws an exception: Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException.
The exception stack is as follows.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  Error starting ApplicationContext.</description>
    </item>
    
    <item>
      <title>4 solutions for selective injection when the interface has multiple implementations</title>
      <link>https://www.springcloud.io/post/2022-04/spring-selective-injection/</link>
      <pubDate>Mon, 04 Apr 2022 14:48:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-selective-injection/</guid>
      <description>1. Description of the problem In the actual system application development I often encounter such a class of requirements, and I believe that you will often encounter in your work. The same system is deployed in multiple provinces. A business in Beijing is one way of implementation, based on the needs of Beijing users. The same business is implemented in Shanghai in another way, much the same way as in</description>
    </item>
    
    <item>
      <title>Deadlock problem caused by improper use of ThreadPoolTaskExecutor</title>
      <link>https://www.springcloud.io/post/2022-04/spring-threadpool/</link>
      <pubDate>Sun, 03 Apr 2022 19:56:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-threadpool/</guid>
      <description>Spring comes with a thread pool is very convenient to use, but in relatively complex concurrent programming scenarios, the use of the scenario still requires careful consideration of the configuration, or you may encounter the pitfalls mentioned in this article. Specific code reference sample project 1. Overview ThredPoolTaskExcutor has 2 core configurations, one is the thread pool size and one is the queue size. The processing flow of ThredPoolTaskExcutor: New</description>
    </item>
    
    <item>
      <title>Spring Cache custom resolver</title>
      <link>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</link>
      <pubDate>Sat, 02 Apr 2022 17:42:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</guid>
      <description>This article introduces the custom cache resolver in spring, by customizing the resolver, you can add additional processing in spring&amp;rsquo;s cache annotation.
 Specific code reference example project
 1. Overview The cache-aside pattern is a commonly used cache usage pattern. The usage flow is as follows.
When the data in the database is updated, the cache is invalidated so that the latest data in the database can be read subsequently, making the cached data consistent with the database data.</description>
    </item>
    
    <item>
      <title>Problems encountered in migrating small microservices from Java to Kotlin and their solutions</title>
      <link>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</link>
      <pubDate>Sat, 02 Apr 2022 17:30:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</guid>
      <description>In this article, I would like to consider the problems and their solutions, which we encountered during the migration of our small microservice from Java to Kotlin.
Stack  Java 11 Spring Web MVC (в рамках Spring Boot) Spring Data JPA Map Struct Lombok Maven  Beginning Firstly, I would recommend anyone, who wants to put Kotlin in your project to start from tests. During this process, we configure almost all you need.</description>
    </item>
    
    <item>
      <title>Spring Boot integration groovy script</title>
      <link>https://www.springcloud.io/post/2022-04/spring-groovy/</link>
      <pubDate>Sat, 02 Apr 2022 14:39:17 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-groovy/</guid>
      <description>Introducing scripting capabilities into our application can be a good way to improve flexibility. Our core development work can be focused on the development of core platform capabilities, and scenario-specific functionality can be implemented through scripting. For example, jenkins can write pipelines through groovy scripts, which can be very flexible to customize the build process. spring itself provides a mechanism for groovy integration, divided into two ways, one is to use groovy development program, similar to the development with java, need to be compiled.</description>
    </item>
    
    <item>
      <title>Downgrading to Java 8 can also solve Spring Framework RCE</title>
      <link>https://www.springcloud.io/post/2022-04/spring-framework-rce-mitigation-alternative/</link>
      <pubDate>Fri, 01 Apr 2022 21:54:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-framework-rce-mitigation-alternative/</guid>
      <description>Yesterday we announced a Spring Framework RCE vulnerability CVE-2022-22965, listing Apache Tomcat as one of several preconditions. The Apache Tomcat team has since released versions 10.0.20 , 9.0.62 , and 8.5.78 all of which close the attack vector on Tomcat&amp;rsquo;s side. While the vulnerability is not in Tomcat itself, in real world situations, it is important to be able to choose among multiple upgrade paths that in turn provides flexibility and layered protection.</description>
    </item>
    
    <item>
      <title>Nacos Configuration Center Cluster Principle and Source Code Analysis</title>
      <link>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</link>
      <pubDate>Fri, 01 Apr 2022 16:55:53 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</guid>
      <description>Nacos, as a configuration center, necessarily needs to ensure high availability of service nodes, so how does Nacos implement clustering?
The following diagram, represents the deployment diagram of Nacos cluster.
How Nacos clusters work Nacos is an uncentralized node design in the cluster architecture as a configuration center. Since there are no master-slave nodes and no election mechanism, it is necessary to add virtual IPs (VIPs) in order to enable hot standby.</description>
    </item>
    
    <item>
      <title>Send a SOAP Object with Feign Client</title>
      <link>https://www.springcloud.io/post/2022-04/feign-send-soap/</link>
      <pubDate>Fri, 01 Apr 2022 16:22:41 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/feign-send-soap/</guid>
      <description>1. Overview Feign abstracts the HTTP calls and makes them declarative. By doing so, Feign hides the lower-level details like HTTP connection management, hardcoded-URLs, and other boilerplate code. The significant advantage of using Feign clients is that HTTP calls are made easy and eliminate a lot of code. Typically, we use the Feign for REST APIs application/json media type. However, the Feign clients work well with other media types like text/xml , multipart requests, etc.</description>
    </item>
    
    <item>
      <title>Spring cache source code analysis</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cache-source-code-analysis/</link>
      <pubDate>Thu, 31 Mar 2022 18:02:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cache-source-code-analysis/</guid>
      <description>Spring cache is a caching API layer that encapsulates common operations for a variety of caches and can easily add caching functionality to your application with the help of annotations. The common annotations are @Cacheable, @CachePut, @CacheEvict, ever wondered what is the principle behind them? With questions, after reading the source code of Spring cache, make a brief summary. First the conclusion, the core logic in the CacheAspectSupport class ,</description>
    </item>
    
    <item>
      <title>Complete Guide to Spring RestTemplate</title>
      <link>https://www.springcloud.io/post/2022-03/spring-resttemplate/</link>
      <pubDate>Thu, 31 Mar 2022 17:53:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-resttemplate/</guid>
      <description>REST-styled APIs are all around us. Many applications need to invoke REST APIs for some or all of their functions. Hence for applications to function gracefully, they need to consume APIs elegantly and consistently.
RestTemplate is a class within the Spring framework that helps us to do just that. In this tutorial, we will understand how to use RestTemplate for invoking REST APIs of different shapes.
Example Code This article is accompanied by a working code example on GitHub.</description>
    </item>
    
    <item>
      <title>Add Prefix to All Spring Boot Controllers</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-controllers-add-prefix/</link>
      <pubDate>Wed, 30 Mar 2022 16:22:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-controllers-add-prefix/</guid>
      <description>1. Introduction In Spring Boot applications, every controller can have its own URL mapping. This makes it easy for a single application to provide web endpoints at multiple locations. For example, we can group our API endpoints into logic groupings such as internal and external.
However, there may be times where we want all of our endpoints under a common prefix. In this tutorial, we&amp;rsquo;ll look at different ways to use a common prefix for all Spring Boot controllers.</description>
    </item>
    
    <item>
      <title>Getting Started With GraphQL SPQR and Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-graphql/</link>
      <pubDate>Tue, 29 Mar 2022 17:24:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-graphql/</guid>
      <description>1. Introduction GraphQL is a query and manipulation language for web APIs. One of the libraries that originated to make working with GraphQL more seamless is SPQR.
In this tutorial, we&amp;rsquo;ll learn the basics of GraphQL SPQR and see it in action in a simple Spring Boot project.
2. What Is GraphQL SPQR? GraphQL is a well-known query language created by Facebook. At its core are schemas - files in which we define custom types and functions.</description>
    </item>
    
    <item>
      <title>Exposing a Helpful Info Endpoint with Spring Boot Actuator</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-info-endpoint/</link>
      <pubDate>Tue, 29 Mar 2022 15:47:28 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-info-endpoint/</guid>
      <description>In a distributed, fast-paced environment, dev teams often want to find out at what time they deployed the app, what version of the app they deployed, what Git commit was deployed, and more.
Spring Boot Actuator helps us monitor and manage the application. It exposes various endpoints that provide app health, metrics, and other relevant information.
In this article, we will find out how to use Spring Boot Actuator and the Maven/Gradle build plugins to add such information to our projects.</description>
    </item>
    
    <item>
      <title>Getting Started With Spring Webflux</title>
      <link>https://www.springcloud.io/post/2022-03/getting-started-with-spring-webflux/</link>
      <pubDate>Tue, 29 Mar 2022 15:30:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/getting-started-with-spring-webflux/</guid>
      <description>Most traditional applications deal with blocking calls or, in other words, synchronous calls. This means that if we want to access a particular resource in a system with most of the threads being busy, then the application would block the new one or wait until the previous threads complete processing its requests.
If we want to process Big Data , however, we need to do this with immense speed and agility.</description>
    </item>
    
    <item>
      <title>Resilience and Best Patterns</title>
      <link>https://www.springcloud.io/post/2022-03/resilience-and-best-patterns/</link>
      <pubDate>Mon, 28 Mar 2022 19:50:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/resilience-and-best-patterns/</guid>
      <description>Monolithic solutions or solutions where a single point of failure can derail an operation is a big problem. In products and platforms that target availability as an essential feature, this problem ends up creating major engineering challenges. This difficulty can be solved with a Microservices architecture. This architecture aims to: Make processes independent and managed in a unique way and without interdependence, so responsibilities are divided and decentralized, something very common in a distributed computing pattern.</description>
    </item>
    
    <item>
      <title>Logging MongoDB Queries with Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</link>
      <pubDate>Mon, 28 Mar 2022 15:37:23 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</guid>
      <description>1. Overview When using Spring Data MongoDB, we may need to log to a higher level than the default one. Typically, we may need to see, for example, some additional information such as statement executions or query parameters.
In this short tutorial, we&amp;rsquo;ll see how to modify the MongoDB logging level for queries.
2. Configure MongoDB Queries Logging MongoDB Support offers the MongoOperations interface or its primary MongoTemplate implementation to access data, so all we need is to configure a debug level for the MongoTemplate class.</description>
    </item>
    
    <item>
      <title>Send multipart/form-data requests using Resttemplate</title>
      <link>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</link>
      <pubDate>Mon, 28 Mar 2022 15:14:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</guid>
      <description>A multipart/form-data request can contain multiple sub-request bodies, each with its own separate header and body. Each sub-request body has its own separate header and body, and is typically used for file uploads. Here we use RestTemplate to send a multipart/form-data request.
RestTemplate It&amp;rsquo;s really simple, it&amp;rsquo;s all in the code.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  package io.</description>
    </item>
    
  </channel>
</rss>
