<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-authorization-server on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-authorization-server/</link>
    <description>Recent content in spring-authorization-server on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Jan 2022 18:50:30 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-authorization-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Authorization Server version 0.2.2 released</title>
      <link>https://www.springcloud.io/post/2022-01/spring-authorization-server-0-2-2-released/</link>
      <pubDate>Thu, 27 Jan 2022 18:50:30 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/spring-authorization-server-0-2-2-released/</guid>
      <description>Spring Authorization Server 0.2.2 is released, this version is mainly about optimizations and bug fixes, the more important new feature is Client authentication support for JWT assertions.
Release Notes New features  JdbcOAuth2AuthorizationService now supports large database fields. Deprecated OAuth2TokenIntrospectionClaimAccessor, will use Spring Security 5.6 implementation. Deprecate JwtEncoder related classes and use Spring Security jose library implementation. The token field in the JdbcOAuth2AuthorizationService now supports clob and text data types. Token revocation logic is now customizable.</description>
    </item>
    
    <item>
      <title>Authorization server framework Spring Authorization Server filter chain</title>
      <link>https://www.springcloud.io/post/2022-01/spring-authorization-server-filter-chain/</link>
      <pubDate>Thu, 13 Jan 2022 21:21:34 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/spring-authorization-server-filter-chain/</guid>
      <description>This article looks at the configuration of OAuth 2.0 Authorization Server related filters. In turn, it provides a better understanding of the entire architecture of Spring Authorization Server. Modular configuration of Spring Security Currently OAuth2.0 Client, Resource Server, Authorization Server these are already modularized in the Spring Security system. So how do they achieve flexible modularity? After analyzing the configuration I found a few similarities below. These are the core</description>
    </item>
    
    <item>
      <title>Getting Started with Spring Authorization Server, Spring&#39;s new authorization server</title>
      <link>https://www.springcloud.io/post/2022-01/spring-authorization-server-trial/</link>
      <pubDate>Thu, 13 Jan 2022 21:08:44 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/spring-authorization-server-trial/</guid>
      <description>Last November 8 Spring officials have strongly recommended to use Spring Authorization Server to replace the outdated Spring Security OAuth2.0. With not much time left before Spring Security OAuth2.0 ends its lifecycle, it&amp;rsquo;s time to make a change. Now that Spring Authorization Server is in production readiness, it&amp;rsquo;s time to learn it.
The current Spring Security architecture Spring Security 5.x modularizes OAuth2.0 Client and OAuth2.0 Resource Server. Spring Security is a mandatory dependency.</description>
    </item>
    
    <item>
      <title>Take RemoteTokenServices as an example - analyze the entire process of obtaining OAuth2 access tokens from the authorization server and loading authentication objects into the SecurityContext from the source code</title>
      <link>https://www.springcloud.io/post/2022-01/remot-token-services/</link>
      <pubDate>Mon, 10 Jan 2022 16:49:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/remot-token-services/</guid>
      <description>When we configure OAuth2, we will configure the resource server and authentication server. When our authorization service and authentication service are not in the same service, we can consider using RemoteTokenServices. If they are in the same service, you don&amp;rsquo;t need to configure tokenServices, because when ResourceServerConfigurerAdapter is configured, if tokenServices is not configured, a default DefaultTokenServices will be automatically configured. . The two tokenService classes both implement the ResourceServerTokenServices</description>
    </item>
    
  </channel>
</rss>
