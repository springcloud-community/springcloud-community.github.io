<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-mvc on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-mvc/</link>
    <description>Recent content in spring-mvc on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Feb 2022 13:19:22 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mock testing of Spring MVC interfaces</title>
      <link>https://www.springcloud.io/post/2022-02/mockmvc/</link>
      <pubDate>Mon, 21 Feb 2022 13:19:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/mockmvc/</guid>
      <description>1. Preface Most of the developers contacted in Java development do not pay much attention to testing the interface, resulting in various problems in the docking. Some also use tools such as Postman for testing, although there is no problem in the use of the interface, if the interface increases the permissions testing is more disgusting. So it is recommended to test the interface in unit testing to ensure the</description>
    </item>
    
    <item>
      <title>A brief analysis of the circular reference problem of returning objects in SpringMVC</title>
      <link>https://www.springcloud.io/post/2022-02/spring-mvc-circular-reference/</link>
      <pubDate>Thu, 17 Feb 2022 15:24:24 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-mvc-circular-reference/</guid>
      <description>Problem Discovery Today this topic is still relatively easy, and many of you may have encountered this problem. The @RestController, @ResponseBody and other annotations are the ones we deal with most when writing web applications, and we often have the need to return an object to the client, which SpringMVC helps us serialize into JSON objects. And today I want to share the topic is not something profound, it is</description>
    </item>
    
    <item>
      <title>How to unit test Controllers in Spring MVC</title>
      <link>https://www.springcloud.io/post/2022-02/springmvc-controller-unittest/</link>
      <pubDate>Wed, 16 Feb 2022 22:12:58 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/springmvc-controller-unittest/</guid>
      <description>Unit testing of Controllers is a capability natively supported by the Spring Framework, which simulates an HTTP client initiating a request to a service address and allows testing of the interface without the use of external tools such as Postman. Specifically, the implementation is provided by the spring-test module of the Spring Framework, see MockMvc. The following section details how to use the MockMvc test framework to implement unit tests</description>
    </item>
    
    <item>
      <title>Tracking the SpringMVC request process</title>
      <link>https://www.springcloud.io/post/2022-02/tracking-spirng-mvc-request-process/</link>
      <pubDate>Sun, 13 Feb 2022 19:04:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/tracking-spirng-mvc-request-process/</guid>
      <description>Overall flow All requests are intercepted to DispatcherServlet , which is also a Servlet , executing doService . Snapshot all the parameters in the request and set some objects in the framework to the request object. Call the doDispatch(request,response) method. Call the getHandler method to get the corresponding Handler. Call getHandlerAdapter to get the corresponding HandlerAdapter. Apply the interceptor&amp;rsquo;s PreHandler, or return it directly if the interceptor&amp;rsquo;s PreHandeler returns false.</description>
    </item>
    
    <item>
      <title>Understanding HttpMessageConverter in Spring</title>
      <link>https://www.springcloud.io/post/2022-02/understand-spring-httpmessageconverter/</link>
      <pubDate>Sun, 13 Feb 2022 18:57:23 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/understand-spring-httpmessageconverter/</guid>
      <description>Http Message Converter Introduction Http Message Converter is responsible for serializing Java Object to JSON/XML data representation and deserializing JSON/XML data representation to Java Object. When we configure: &amp;lt;mvc:annotation-driven /&amp;gt; in based XML or @EnableWebMvc in based Java (both are equivalent), AnnotationDrivenBeanDefinitionParser will register a series of conversion service, validators, and message-converters. If there is no custom &amp;lt;message-converters&amp;gt; tag in &amp;lt;mvc:annotation-driven /&amp;gt;, Spring will register the following set of message-converters</description>
    </item>
    
    <item>
      <title>How to elegantly read and write HttpServletRequest and HttpServletResponse request bodies</title>
      <link>https://www.springcloud.io/post/2022-02/elegantly-read-and-write-httpbody/</link>
      <pubDate>Sun, 13 Feb 2022 13:47:24 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/elegantly-read-and-write-httpbody/</guid>
      <description>Recently, many interactions have to deal with the native HttpServletRequest and HttpServletResponse. Read body data from HttpServletRequest and encapsulate it into some kind of data structure; write data to HttpServletResponse and respond. The traditional way of writing is very inelegant, so today we introduce you to a more elegant way. HttpMessageConverter HttpMessageConverter is a message converter model provided by the Spring Framework, a policy interface for converting between HTTP requests</description>
    </item>
    
    <item>
      <title>ResponseEntity Usage Tips</title>
      <link>https://www.springcloud.io/post/2022-02/responseentity-tips/</link>
      <pubDate>Fri, 11 Feb 2022 13:07:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/responseentity-tips/</guid>
      <description>The ResponseEntity object is Spring&amp;rsquo;s wrapper around the request response. It inherits from the HttpEntity object and contains the Http response code (httpstatus), the response header (header), and the response body (body). A Spring MVC interface to get user information usually we return the entity directly (with @RestController). 1 2 3 4 5 6 @GetMapping(&amp;#34;/user&amp;#34;) public User userinfo() { User user = new User(); user.setUsername(&amp;#34;felord.cn&amp;#34;); return user; } is equivalent</description>
    </item>
    
    <item>
      <title>SpringMVC exception handling system in-depth analysis</title>
      <link>https://www.springcloud.io/post/2022-02/springmvc-exception/</link>
      <pubDate>Tue, 08 Feb 2022 13:17:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/springmvc-exception/</guid>
      <description>SpringMVC has a complete system for handling exceptions, and it works very well. This article talks about the exception handling system in SpringMVC. We will sort out the exception system in SpringMVC from beginning to end.
1. Exception Resolver Overview In SpringMVC&amp;rsquo;s exception system, the big boss at the top is the HandlerExceptionResolver, an interface with a single method.
1 2 3 4 5  public interface HandlerExceptionResolver { @Nullable ModelAndView resolveException( HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex); }   The resolveException method is used to resolve the exceptions generated during the request processing and eventually return a ModelAndView.</description>
    </item>
    
    <item>
      <title>Spring Boot logs access logs in several ways</title>
      <link>https://www.springcloud.io/post/2022-02/mvc-httptrace/</link>
      <pubDate>Tue, 08 Feb 2022 12:54:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/mvc-httptrace/</guid>
      <description>Certain business requirements require tracking our interface access, i.e. logging the requests and responses. The basic logging dimension contains request parameters (path query parameters, request body), request path (uri), request method (method), request headers (headers), and response status, response headers, and even contains sensitive response bodies, etc. Today summarizes several methods, you can choose as needed. How request tracking is implemented Gateways Many gateway facilities have httptrace capabilities that help</description>
    </item>
    
  </channel>
</rss>
