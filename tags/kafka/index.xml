<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kafka on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/kafka/</link>
    <description>Recent content in kafka on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Mar 2022 16:50:47 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deep Dive Into Saga Transactions With Kafka Streams and Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/deep-dive-into-saga-transactions-with-kafka-streams-and-spring-boot/</link>
      <pubDate>Fri, 11 Mar 2022 16:50:47 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/deep-dive-into-saga-transactions-with-kafka-streams-and-spring-boot/</guid>
      <description>In this article, you will learn how to use Kafka Streams and Spring Boot to perform transactions according to the Saga pattern. To be honest, I was quite surprised by a great deal of attention to my last article about Kafka. I got some questions about streams, transactions, and support for Kafka in Spring Boot. In this article, I&amp;rsquo;ll try to answer a few of them. I will also show how you can easily set up a cloud-managed Kafka on the Upstash.</description>
    </item>
    
    <item>
      <title>Spring Cloud Stream with Schema Registry and Kafka</title>
      <link>https://www.springcloud.io/post/2021-12/spring-cloud-stream-with-schema-registry-and-kafka/</link>
      <pubDate>Fri, 10 Dec 2021 16:51:17 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/spring-cloud-stream-with-schema-registry-and-kafka/</guid>
      <description>In this article, you will learn how to use Confluent Schema Registry with Spring Cloud Stream and Kafka in a microservices architecture. We will use Apache Avro to serialize and deserialize events exchanged between our applications. Spring Cloud Stream provides a handy mechanism for integration with Kafka and schema registry.
Ok, but before we start, let’s say some words about schema registry. What is this? And why we may use it in our event-driven architecture?</description>
    </item>
    
    <item>
      <title>Spring Cloud Streams with Apache Kafka</title>
      <link>https://www.springcloud.io/post/2021-12/spring-cloud-streams-with-apache-kafka/</link>
      <pubDate>Wed, 08 Dec 2021 16:55:00 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/spring-cloud-streams-with-apache-kafka/</guid>
      <description>Have you ever wondered how features like Google Maps&amp;rsquo; live traffic work? These systems have to gather and process data in real-time. The architecture of these systems generally involves a data pipeline that processes and transfers data to be processed further until it reaches the clients. In this article, we will see something similar with a simple example using Kafka Streams. The sample app can be found here.
Introduction to Spring Cloud Stream Spring Cloud Stream is a framework designed to support stream processing provided by various messaging systems like Apache Kafka, RabbitMQ, etc.</description>
    </item>
    
    <item>
      <title>Kafka Streams with Spring Cloud Stream</title>
      <link>https://www.springcloud.io/post/2021-12/kafka-streams-with-spring-cloud-stream/</link>
      <pubDate>Tue, 07 Dec 2021 20:02:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/kafka-streams-with-spring-cloud-stream/</guid>
      <description>In this article, you will learn how to use Kafka Streams with Spring Cloud Stream. We will build a simple Spring Boot application that simulates the stock market. Based on that example, I’ll try to explain what a streaming platform is and how it differs from a traditional message broker. If you are looking for an intro to the Spring Cloud Stream project you should read my article about it. It describes how to use Spring Cloud Stream with RabbitMQ in order to build event-driven microservices.</description>
    </item>
    
  </channel>
</rss>
