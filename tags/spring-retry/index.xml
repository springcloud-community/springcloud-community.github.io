<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-retry on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-retry/</link>
    <description>Recent content in spring-retry on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Dec 2021 16:28:37 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-retry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Retry</title>
      <link>https://www.springcloud.io/post/2021-12/retry-in-spring-boot-applications/</link>
      <pubDate>Fri, 10 Dec 2021 16:28:37 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/retry-in-spring-boot-applications/</guid>
      <description>Spring Retry provides the ability to automatically re-invoke a failed operation. This is helpful when errors may be transient in nature. For example, a momentary network glitch, network outage, server down, or deadlock.
You can configure the spring-retry module using annotations. You can define the retry limits, fallback methods, etc.
In this post, you will learn how to use the spring-retry module.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
  </channel>
</rss>
