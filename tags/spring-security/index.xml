<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-security on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-security/</link>
    <description>Recent content in spring-security on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Apr 2022 17:08:27 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Security annotated access rights control combing</title>
      <link>https://www.springcloud.io/post/2022-04/spring-security-annotation/</link>
      <pubDate>Fri, 15 Apr 2022 17:08:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-security-annotation/</guid>
      <description>Spring Security provides annotation-based access control. turns on method annotation access control Spring Security turns off method annotations by default, to turn it on just add the @EnableGlobalMethodSecurity annotation. 1 2 3 4 5 6 7 8 9 10 /** * ÂºÄÂêØÊñπÊ≥ïÂÆâÂÖ®Ê≥®Ëß£ * * @author felord.cn */ @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true) public class MethodSecurityConfig { } @EnableGlobalMethodSecurity provides</description>
    </item>
    
    <item>
      <title>Ideas for integrating OAuth2 with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</link>
      <pubDate>Mon, 11 Apr 2022 08:55:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</guid>
      <description>Microservices to do user authentication and authorization has always been a difficult point, with the OAuth2.0 password mode was invalidated, it is even more difficult.This article will share some ideas.
Two ways of thinking There are usually two ways of thinking about authentication and authorization for microservices.
 All authentication authorization is handled by an independent user authentication authorization server, which is only responsible for issuing Token, and then the gateway is only responsible for forwarding requests to each microservice module, and each module of the microservice performs the verification process of Token by itself.</description>
    </item>
    
    <item>
      <title>Spring Security without the WebSecurityConfigurerAdapter</title>
      <link>https://www.springcloud.io/post/2022-03/spring-security-without-the-websecurityconfigureradapter/</link>
      <pubDate>Tue, 22 Mar 2022 10:27:35 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-security-without-the-websecurityconfigureradapter/</guid>
      <description>In Spring Security 5.7.0-M2 we deprecated the WebSecurityConfigurerAdapter , as we encourage users to move towards a component-based security configuration.
To assist with the transition to this new style of configuration, we have compiled a list of common use-cases and the suggested alternatives going forward.
In the examples below we follow best practice by using the Spring Security lambda DSL and the method HttpSecurity#authorizeHttpRequests to define our authorization rules. If you are new to the lambda DSL you can read about it in this blog post.</description>
    </item>
    
    <item>
      <title>Spring Security will soon deprecate the configuration class WebSecurityConfigurerAdapter</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-deprecate-websecurityconfigureradapter/</link>
      <pubDate>Tue, 22 Feb 2022 13:46:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-deprecate-websecurityconfigureradapter/</guid>
      <description>Anyone who has used WebSecurityConfigurerAdapter knows that it is very important for Spring Security, it manages the whole Spring Security configuration system. But soon this class will be obsolete, you read it right, this class will be marked by @Deprecated in version 5.7 and this class will be removed in the future(#10822). Since this configuration class will be deprecated soon, there must be a transition plan. I&amp;rsquo;ve actually written an</description>
    </item>
    
    <item>
      <title>How Spring Security&#39;s built-in filters are maintained</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-built-in-filters/</link>
      <pubDate>Tue, 22 Feb 2022 13:19:26 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-built-in-filters/</guid>
      <description>How is the order of built-in filters maintained in Spring Security? I think many developers are interested in this question. In this article, I will discuss this issue with you. HttpSecurity contains a member variable FilterOrderRegistration and this class is a built-in filter registry. As for the role of these filters, not the focus of this article, interested to see the FilterOrderRegistration source code. Order of built-in filters The FilterOrderRegistration</description>
    </item>
    
    <item>
      <title>Distributed Objects in Spring Security - SharedObject</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-shared-object/</link>
      <pubDate>Sat, 19 Feb 2022 14:42:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-shared-object/</guid>
      <description>1. Preface We previously analyzed the details of the initialization of AuthenticationManager, and there was a piece of code in it that caught the attention of many people.
1 2  ApplicationContext context = http.getSharedObject(ApplicationContext.class); CaptchaAuthenticationProvider captchaAuthenticationProvider = context.getBean(&amp;#34;captchaAuthenticationProvider&amp;#34;, CaptchaAuthenticationProvider.class);   How does the above get the Spring application context object ApplicationContext directly from the HttpSecurity object? And what is the concept of SharedObject? Let&amp;rsquo;s figure this out today.</description>
    </item>
    
    <item>
      <title>OAuth2 authorization server Keycloak announces it no longer adapts to Spring Boot and Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-announces/</link>
      <pubDate>Tue, 15 Feb 2022 08:33:35 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-announces/</guid>
      <description>On February 14, üíî the Keycloak team announced that they are deprecating most Keycloak adapters.
This includes adapters for Spring Security and Spring Boot, which means that in the future the Keycloak team will no longer provide integration solutions for Spring Security and Spring Boot.
The Keycloak project is a powerful OIDC (an extension of OAuth2) authorization server, and not even just an authorization server. It provides a number of adapters to provide an integration solution for other ecologies, but as mentioned in the official Keycloak statement.</description>
    </item>
    
    <item>
      <title>The core logic of Spring Security OAuth2 to get Token</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-get-token/</link>
      <pubDate>Mon, 14 Feb 2022 15:33:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-get-token/</guid>
      <description>1. Preface In [previous post], we talked about how when a third party agrees to an authorization it will call redirectUri to send a return receipt to our server. Our server gets an intermediate authorization credential and authenticates again for the purpose of obtaining a Token. And this logic is responsible by OAuth2LoginAuthenticationProvider, after the analysis of [previous article] we found that the specific logic to obtain Token is done</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2 authorization callback processing mechanism</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-callback/</link>
      <pubDate>Mon, 14 Feb 2022 14:26:45 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-callback/</guid>
      <description>1. Preface The previous post focused on how to initialize the OAuth2AuthorizationRequest authorization request object when a user initiates a third-party authorization request and how to forward it through the filter to the third party. Today we will follow this process down to see what the server does when it receives an authorization request.
2. OAuth2 Login Authentication When the third party receives an OAuth2 authorization request, it will pass the authorization acknowledgement to us via a callback request redirect_uri provided by us.</description>
    </item>
    
    <item>
      <title>How Spring Security OAuth2 authorization requests are constructed and executed</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-request/</link>
      <pubDate>Mon, 14 Feb 2022 14:00:42 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-request/</guid>
      <description>1. Preface In the previous article we found the filter OAuth2AuthorizationRequestRedirectFilter that intercepts the OAuth2 authorization request entry /oauth2/authorization and found the method that actually initiates the OAuth2 authorization request sendRedirectForAuthorization. But this method is not described in detail, so I&amp;rsquo;ll continue today. 2. sendRedirectForAuthorization This sendRedirectForAuthorization method is not much code, its main purpose is to redirect access to third-party platforms for authorization. All its logic is related to</description>
    </item>
    
    <item>
      <title>Spring Security Client OAuth2 authorization request entry</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-entry/</link>
      <pubDate>Mon, 14 Feb 2022 13:48:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-entry/</guid>
      <description>Entry http://localhost:8082/oauth2/authorization/gitee Suppose the request URL above is the starting point for the client to perform third-party authentication, the default format is {baseUrl}/oauth2/authorization/{clientRegistrationId}, where clientRegistrationId represents a third-party identifier, which can be WeChat, Alipay and other open platforms. Alipay and other open platforms, in this case gitee. After the user clicks on the request, the authorization journey begins. Spring Security must have intercepted the /oauth2/authorization before enabling the OAuth2 related</description>
    </item>
    
    <item>
      <title>How Spring Security filter chains match to specific requests</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-match-to-specific-requests/</link>
      <pubDate>Mon, 14 Feb 2022 12:56:55 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-match-to-specific-requests/</guid>
      <description>You know from previous post that SecurityFilterChain determines which requests go through the filter chain, so how does SecurityFilterChain match to a specific request? How to intercept specific requests Only requests that satisfy the match method of a SecurityFilterChain can be processed by that SecurityFilterChain, so how do you configure a SecurityFilterChain to process a specific path? RequestMatcher HttpSecurity has a built-in RequestMatcher property to handle path matching. The RequestMatcher</description>
    </item>
    
    <item>
      <title>Spring Security version 5.4 brings new ways to play</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-new-configuration/</link>
      <pubDate>Sun, 13 Feb 2022 14:44:20 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-new-configuration/</guid>
      <description>1. Preface In previous Spring Security tutorials we customize configuration by declaring a configuration class WebSecurityConfigurerAdapter and then overriding (@Override) the corresponding methods. However, all this has changed since Spring Security 5.4, since Spring Security 5.4 we don&amp;rsquo;t need to inherit from WebSecurityConfigurerAdapter in order to configure HttpSecurity. The original description reads. Remove need for WebSecurityConfigurerAdapter #8805 Configure HTTP Security without extending WebSecurityConfigurerAdapter #8804 issues/8804) 2. The new configuration method</description>
    </item>
    
    <item>
      <title>Spring Security Dynamic Permission Control could be a little simpler</title>
      <link>https://www.springcloud.io/post/2022-02/easy-dyn-acl-spring-security/</link>
      <pubDate>Sun, 13 Feb 2022 14:30:51 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/easy-dyn-acl-spring-security/</guid>
      <description>Previously in the tutorial on dynamic permission control, we implemented dynamic permission control by customizing FilterInvocationSecurityMetadataSource and AccessDecisionManager two interfaces. There are more things we need to do here, and there is a certain learning cost. Today to introduce a more simple and easy to understand approach to implement dynamic permission control. Expression-based access control 1 2 3 httpSecurity.authorizeRequests() .anyRequest() .access(&amp;#34;hasRole(&amp;#39;admin&amp;#39;)&amp;#34;) Needless to say, after we configure the expression hasRole(&#39;admin&#39;),</description>
    </item>
    
    <item>
      <title>Spring Security filter chain system</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-filter-chain-system/</link>
      <pubDate>Sun, 13 Feb 2022 13:55:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-filter-chain-system/</guid>
      <description>While learning Spring Security did you have any of the following two questions. How is login configured in Spring Security? What is the access control mechanism for Spring Security? SpringBootWebSecurityConfiguration The answers to the above two questions are in the configuration class SpringBootWebSecurityConfiguration. You can follow this mind map to understand it. This auto-configuration: SpringBootWebSecurityConfiguration provides a default set of Spring Security configurations for Spring Boot applications. 1 2 3</description>
    </item>
    
    <item>
      <title>Spring Security&#39;s new JWT implementation</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-new-jwt/</link>
      <pubDate>Sat, 12 Feb 2022 12:10:54 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-new-jwt/</guid>
      <description>I have used the official spring-security-jwt provided by Spring as an implementation of JWT. This toolkit is no longer maintained. And it is not particularly compatible with the latest Spring Security OAuth2 Client and Spring Authorization Server. So I took two days to re-implement JWT with these two new dependencies.
Nimbus Library The JOSE library nimbus-jose-jwt from Nimbus is used by default in the latest Spring Security. This library is currently one of the most used JOSE class libraries and most of the transformation work has been done around this library.</description>
    </item>
    
    <item>
      <title>The difference between WebSecurity and HttpSecurity in Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/websecurity-and-httpsecurity/</link>
      <pubDate>Sat, 12 Feb 2022 11:47:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/websecurity-and-httpsecurity/</guid>
      <description>The Nature of HttpSecurity Spring Security 5.4 has a new way of configuring HttpSecurity. 1 2 3 4 5 6 7 8 9 @Bean SecurityFilterChain filterChain(HttpSecurity http) throws Exception { return http .antMatcher(&amp;#34;/**&amp;#34;) .authorizeRequests(authorize -&amp;gt; authorize .anyRequest().authenticated() ) .build(); } In fact, you can know that HttpSecurity is used to build a filter SecurityFilterChain that contains a series of filter chains, and normally our configuration is based around building SecurityFilterChain.</description>
    </item>
    
    <item>
      <title>Spring Security Unit Testing</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-unit-testing/</link>
      <pubDate>Sat, 12 Feb 2022 11:37:19 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-unit-testing/</guid>
      <description>Spring Security Test Environment To use Spring Security in your unit tests, you need to add spring-security-test to your Spring Boot project.
1 2 3 4 5  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;   This way the contextual configuration of the tests can be combined with Spring Security, and the next few tricks will teach you.
Spring Security Testing All tests are done under Spring Boot Test, which is supported by the @SpringBootTest annotation.</description>
    </item>
    
    <item>
      <title>Spring Security gets the currently logged in user</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-get-current-user/</link>
      <pubDate>Thu, 10 Feb 2022 19:39:51 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-get-current-user/</guid>
      <description>In some scenarios we need to get who the current user is? If you are using Spring Secrity as a security framework you can get the current user by using the following means.
SecurityContext Either in stateful Session mode or in the popular JWT mode you can use SecurityContext to get the current user.
1 2  Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); String currentPrincipalName = authentication.getName();   Of course, this approach is not rigorous enough, if the interface allows anonymous access is likely to return an anonymous user, and anonymous users can not be obtained directly through getName, so we need to optimize the above logic.</description>
    </item>
    
    <item>
      <title>The execution flow of an interface between Keycloak and Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-keycloak-interface/</link>
      <pubDate>Thu, 10 Feb 2022 13:45:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-keycloak-interface/</guid>
      <description>In the previous article we got familiar with the common configuration of Keycloak, today we will do an analysis of the execution flow of Keycloak adapted to Spring Security and briefly understand some of its customized Spring Security filters. Execution flow of /admin/foo In the Spring Boot application adapted with Keycloak and Spring Security, I wrote a /admin/foo interface and configured the permissions for this interface as follows. 1 2</description>
    </item>
    
  </channel>
</rss>
