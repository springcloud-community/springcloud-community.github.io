<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/redis/</link>
    <description>Recent content in redis on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Apr 2022 17:42:39 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Cache custom resolver</title>
      <link>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</link>
      <pubDate>Sat, 02 Apr 2022 17:42:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-redis-resolver/</guid>
      <description>This article introduces the custom cache resolver in spring, by customizing the resolver, you can add additional processing in spring&amp;rsquo;s cache annotation.
 Specific code reference example project
 1. Overview The cache-aside pattern is a commonly used cache usage pattern. The usage flow is as follows.
When the data in the database is updated, the cache is invalidated so that the latest data in the database can be read subsequently, making the cached data consistent with the database data.</description>
    </item>
    
  </channel>
</rss>
