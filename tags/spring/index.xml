<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring/</link>
    <description>Recent content in spring on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Apr 2022 17:30:40 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problems encountered in migrating small microservices from Java to Kotlin and their solutions</title>
      <link>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</link>
      <pubDate>Sat, 02 Apr 2022 17:30:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/from-java-to-kotlin-there-and-back-again/</guid>
      <description>In this article, I would like to consider the problems and their solutions, which we encountered during the migration of our small microservice from Java to Kotlin.
Stack  Java 11 Spring Web MVC (в рамках Spring Boot) Spring Data JPA Map Struct Lombok Maven  Beginning Firstly, I would recommend anyone, who wants to put Kotlin in your project to start from tests. During this process, we configure almost all you need.</description>
    </item>
    
    <item>
      <title>About Spring Core Spring Beans Remote Code Warning Notice for Execution 0day Vulnerability</title>
      <link>https://www.springcloud.io/post/2022-03/spring-0day-vulnerability/</link>
      <pubDate>Wed, 30 Mar 2022 10:06:26 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-0day-vulnerability/</guid>
      <description>Information indicates that an RCE 0day vulnerability has been reported in the Spring Framework. If the target system is developed using Spring and has a JDK version above JDK9, an unauthorized attacker can exploit this vulnerability to remotely execute arbitrary code on the target device.
1. Vulnerability Situation Analysis The Spring framework is the most widely used lightweight open source framework for Java, and in the JDK9 version of the Spring framework (and above), a remote attacker can obtain an AccessLogValve object through the framework&amp;rsquo;s parameter binding feature and use malicious field values to trigger the pipeline mechanism and write to a file in an arbitrary path if certain conditions are met.</description>
    </item>
    
    <item>
      <title>Environment in Spring detailed explanation</title>
      <link>https://www.springcloud.io/post/2022-02/spring-environment/</link>
      <pubDate>Tue, 22 Feb 2022 13:06:08 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-environment/</guid>
      <description>Environment represents the environment information for the entire spring application runtime, which contains two key elements.
 profiles properties  profiles The concept of profiles, which I believe we all understand, is most commonly used in different environments to determine different configuration contexts for solutions in the current spring container. For example, for the development environment, test environment, production environment, build different application.properties configuration items, this time we can determine the current spring application context in effect through the property profiles.</description>
    </item>
    
    <item>
      <title>Writing Spring tests with Kotlin</title>
      <link>https://www.springcloud.io/post/2022-02/writing-spring-tests-with-kotlin/</link>
      <pubDate>Sun, 13 Feb 2022 19:13:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/writing-spring-tests-with-kotlin/</guid>
      <description>Preface Usually we write Spring projects using Java language for business development and Java for unit testing. But Java is not very efficient in writing test code due to its lengthy code, and we usually consider multiple scenarios when writing the test code, so the amount of code expands dramatically, which brings a lot of time wastage. The biggest headache is the MockMvc mock request test, Java does not support multi-line strings until 15, which leads to the need to splice line by line, which is very unintuitive to read and does not make good use of the Intellij IDEA injection language.</description>
    </item>
    
    <item>
      <title>Content negotiation in Spring MVC</title>
      <link>https://www.springcloud.io/post/2022-01/content-negotiation-manager/</link>
      <pubDate>Sat, 22 Jan 2022 17:30:28 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/content-negotiation-manager/</guid>
      <description>In the HTTP protocol, when a client initiates an HTTP request, it can carry a request header Accept to tell the server which response types the client can accept (MIME), either one or more. It is now common for front- and back-end separation to use this.
1  Accept:application/json   For Spring MVC framework to accept the corresponding Accept will be based on a certain policy to find the corresponding HttpMessageConverter to handle the format of the response data.</description>
    </item>
    
    <item>
      <title>AOP in Spring Boot, is it a JDK dynamic proxy or a Cglib dynamic proxy?</title>
      <link>https://www.springcloud.io/post/2022-01/springboot-aop/</link>
      <pubDate>Thu, 13 Jan 2022 21:38:20 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/springboot-aop/</guid>
      <description>As we all know, the underlying AOP is dynamic proxies, and there are two ways to implement dynamic proxies in Java:
 JDK-based dynamic proxy Dynamic proxy based on Cglib  The biggest difference between these two is that JDK-based dynamic proxies require the object being proxied to implement an interface, while Cglib-based dynamic proxies do not require the object being proxied to implement an interface.
So, how is AOP implemented in Spring?</description>
    </item>
    
  </channel>
</rss>
