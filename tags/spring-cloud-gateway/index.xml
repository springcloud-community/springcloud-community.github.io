<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-cloud-gateway on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-cloud-gateway/</link>
    <description>Recent content in spring-cloud-gateway on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Apr 2022 08:55:10 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-cloud-gateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ideas for integrating OAuth2 with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</link>
      <pubDate>Mon, 11 Apr 2022 08:55:10 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cloud-gatewat-oauth2/</guid>
      <description>Microservices to do user authentication and authorization has always been a difficult point, with the OAuth2.0 password mode was invalidated, it is even more difficult.This article will share some ideas.
Two ways of thinking There are usually two ways of thinking about authentication and authorization for microservices.
 All authentication authorization is handled by an independent user authentication authorization server, which is only responsible for issuing Token, and then the gateway is only responsible for forwarding requests to each microservice module, and each module of the microservice performs the verification process of Token by itself.</description>
    </item>
    
    <item>
      <title>Moving from Spring Cloud Netflix Zuul to Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/netflix-zuul-to-spring-cloud-gateway/</link>
      <pubDate>Tue, 22 Mar 2022 16:18:01 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/netflix-zuul-to-spring-cloud-gateway/</guid>
      <description>I&amp;rsquo;ve been using Netflix Zuul for many years as a proxy for APIs. Some weeks ago I tried to bootstrap a new project and add the zuul starter via spring initializr and couldn&amp;rsquo;t find it anymore. After some research it seems that Spring Cloud has moved over to Cloud Gateway and discontinued Netflix Zuul. Maybe this was just a rebranding of the Spring team but tbh I don&amp;rsquo;t care and want to follow the Spring Cloud team with that.</description>
    </item>
    
    <item>
      <title>Load Balanced Websockets with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/load-balanced-websockets-with-spring-cloud-gateway/</link>
      <pubDate>Fri, 18 Mar 2022 13:54:43 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/load-balanced-websockets-with-spring-cloud-gateway/</guid>
      <description>The ability to have real-time two-way communication between the client and the server is a key feature in most modern web apps.
A simple approach to setting up WebSockets in Spring Boot is covered in Simple WebSockets with Spring Boot, which uses an in-memory message broker. This approach falls short, though, when you scale up and add additional servers. Users connected to different servers would have no way of communicating or getting updates pushed to them for something that&amp;rsquo;s happened on another server.</description>
    </item>
    
    <item>
      <title>URL Rewriting With Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2022-03/spring-cloud-gateway-url-rewriting/</link>
      <pubDate>Tue, 15 Mar 2022 19:20:41 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-cloud-gateway-url-rewriting/</guid>
      <description>1. Introduction A common use case for the Spring Cloud Gateway is to act as a facade to one or more services, thus offering clients a simpler way to consume them.
In this tutorial, we&amp;rsquo;ll show different ways to customize the exposed APIs by rewriting the URLs before sending the request to the backends.
2. Spring Cloud Gateway Quick Recap The Spring Cloud Gateway project is built on top of the popular Spring Boot 2 and Project Reactor, so it inherits its main treats:</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway and gRPC</title>
      <link>https://www.springcloud.io/post/2021-12/spring-cloud-gateway-and-grpc/</link>
      <pubDate>Fri, 10 Dec 2021 08:50:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/spring-cloud-gateway-and-grpc/</guid>
      <description>Starting from version 3.1.0 as part of the Spring Cloud 2021.0.0 (aka Jubilee) release train, Spring Cloud Gateway included support for gRPC and HTTP/2.
We will introduce the basic concepts behind gRPC and how to configure it with two examples:
 One that showcases how Spring Cloud Gateway can transparently re-route gRPC traffic without needing to know the proto definition and without having to modify our existing gRPC servers. Another that showcases how we can create a custom filter in Spring Cloud Gateway to transform a JSON payload to a gRPC message.</description>
    </item>
    
    <item>
      <title>An Intro to Dapr with Spring Cloud Gateway</title>
      <link>https://www.springcloud.io/post/2021-12/dapr-spring-cloud-gateway/</link>
      <pubDate>Thu, 09 Dec 2021 09:16:54 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/dapr-spring-cloud-gateway/</guid>
      <description>1. Overview In this article, we&amp;rsquo;ll start with a Spring Cloud Gateway application and a Spring Boot application. Then, we&amp;rsquo;ll update it to use Dapr (Distributed Application Runtime) instead. Finally, we&amp;rsquo;ll update the Dapr configuration to show the flexibility that Dapr provides when integrating with cloud-native components .
2. Intro to Dapr With Dapr, we can manage the deployment of a cloud-native application without any impact on the application itself. Dapr uses the sidecar pattern to off-load deployment concerns from the application, which allows us to deploy it into other environments (such as on-premise, different proprietary Cloud platforms, Kubernetes, and others) without any changes to the application itself .</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway Hystrix</title>
      <link>https://www.springcloud.io/post/2021-12/spring-cloud-gateway-hystrix/</link>
      <pubDate>Sat, 04 Dec 2021 15:55:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/spring-cloud-gateway-hystrix/</guid>
      <description>In the microservice architecture, if the downstream dependency problem occurs, if the upstream caller does not do request degradation processing, the downstream abnormal dependency is not isolated, it is likely that one or two services or as small as one or two interface abnormalities lead to the unavailability of all upstream services, or even affect the whole business line. The mainstream request degradation processing is still the Hystrix from Netfilx.</description>
    </item>
    
  </channel>
</rss>
