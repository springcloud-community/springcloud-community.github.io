<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>resilience4j on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/resilience4j/</link>
    <description>Recent content in resilience4j on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Dec 2021 09:30:50 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/resilience4j/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enforcing Resilience in a Spring Boot App using Resilience4J</title>
      <link>https://www.springcloud.io/post/2021-12/enforcing-resilience-in-a-spring-boot-app-using-resilience4j/</link>
      <pubDate>Wed, 08 Dec 2021 09:30:50 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/enforcing-resilience-in-a-spring-boot-app-using-resilience4j/</guid>
      <description>An important property of modern web apps is Resilience. In simple words, resilience is the ability of a systemâ€™s feature to fail gracefully without impacting the entire system. In the case of web apps, we want to make sure that the entire system will not be down if a remote service (a database, API Server) fails (is slow or down).
What is Resilience4J? Resilience4J is a lightweight, easy-to-use fault tolerance library inspired by Netflix Hystrix but designed for Java 8 and functional programming.</description>
    </item>
    
  </channel>
</rss>
