<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/sql/</link>
    <description>Recent content in sql on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Dec 2021 08:57:38 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The best way to log SQL statements with Spring Boot</title>
      <link>https://www.springcloud.io/post/2021-12/log-sql-spring-boot/</link>
      <pubDate>Thu, 09 Dec 2021 08:57:38 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/log-sql-spring-boot/</guid>
      <description>Introduction In this article, I’m going to show you the best way to log SQL statements when using Spring Boot.
Logging SQL queries is very important, as it allows you to validate the number of generated statements, the syntax of the auto-generated queries, as well as prove that JDBC batching works as expected.
Don’t log SQL statements with the Spring Boot show-sql property It’s very common for a Spring Boot application to store data in a relational database, and, most often, Spring Data JPA is the default data access technology.</description>
    </item>
    
  </channel>
</rss>
