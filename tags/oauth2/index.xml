<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oauth2 on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/oauth2/</link>
    <description>Recent content in oauth2 on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Feb 2022 15:33:22 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/oauth2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The core logic of Spring Security OAuth2 to get Token</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-get-token/</link>
      <pubDate>Mon, 14 Feb 2022 15:33:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-get-token/</guid>
      <description>1. Preface In [previous post], we talked about how when a third party agrees to an authorization it will call redirectUri to send a return receipt to our server. Our server gets an intermediate authorization credential and authenticates again for the purpose of obtaining a Token. And this logic is responsible by OAuth2LoginAuthenticationProvider, after the analysis of [previous article] we found that the specific logic to obtain Token is done</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2 authorization callback processing mechanism</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-callback/</link>
      <pubDate>Mon, 14 Feb 2022 14:26:45 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-callback/</guid>
      <description>1. Preface The previous post focused on how to initialize the OAuth2AuthorizationRequest authorization request object when a user initiates a third-party authorization request and how to forward it through the filter to the third party. Today we will follow this process down to see what the server does when it receives an authorization request.
2. OAuth2 Login Authentication When the third party receives an OAuth2 authorization request, it will pass the authorization acknowledgement to us via a callback request redirect_uri provided by us.</description>
    </item>
    
    <item>
      <title>How Spring Security OAuth2 authorization requests are constructed and executed</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-request/</link>
      <pubDate>Mon, 14 Feb 2022 14:00:42 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-request/</guid>
      <description>1. Preface In the previous article we found the filter OAuth2AuthorizationRequestRedirectFilter that intercepts the OAuth2 authorization request entry /oauth2/authorization and found the method that actually initiates the OAuth2 authorization request sendRedirectForAuthorization. But this method is not described in detail, so I&amp;rsquo;ll continue today. 2. sendRedirectForAuthorization This sendRedirectForAuthorization method is not much code, its main purpose is to redirect access to third-party platforms for authorization. All its logic is related to</description>
    </item>
    
    <item>
      <title>Spring Security Client OAuth2 authorization request entry</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-entry/</link>
      <pubDate>Mon, 14 Feb 2022 13:48:39 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-oauth2-authorization-entry/</guid>
      <description>Entry http://localhost:8082/oauth2/authorization/gitee Suppose the request URL above is the starting point for the client to perform third-party authentication, the default format is {baseUrl}/oauth2/authorization/{clientRegistrationId}, where clientRegistrationId represents a third-party identifier, which can be WeChat, Alipay and other open platforms. Alipay and other open platforms, in this case gitee. After the user clicks on the request, the authorization journey begins. Spring Security must have intercepted the /oauth2/authorization before enabling the OAuth2 related</description>
    </item>
    
    <item>
      <title>OIDC authentication authorization protocol</title>
      <link>https://www.springcloud.io/post/2022-02/about-oidc/</link>
      <pubDate>Thu, 10 Feb 2022 13:11:20 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/about-oidc/</guid>
      <description>In the previous article we reviewed the OAuth 2.0 process with an example, and pointed out the limitations of OAuth 2.0: The client cannot identify the resource owner as the correct advocate, and while commercially available OAuth 2.0 can guarantee authorization security, OAuth 2.0 itself does not provide clear specifications for user authentication. This is where OIDC comes into play.
OIDC  OIDC is a variant of OAuth 2.0.
 OIDC (OpenID Connect) builds on the Auth 2.</description>
    </item>
    
    <item>
      <title>OAuth 2.0 is only the authorization protocol, OIDC is the authentication authorization protocol</title>
      <link>https://www.springcloud.io/post/2022-02/oauth-2-0-and-oidc/</link>
      <pubDate>Thu, 10 Feb 2022 13:03:38 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/oauth-2-0-and-oidc/</guid>
      <description>In the previous article we did a hands-on exercise on Keycloak protecting Spring Boot applications. We showed you how powerful Keycloak is. But in order to master Keycloak you need to understand the OpenID Connect (OIDC) protocol. OIDC is an extension of OAuth 2.0. Why does it extend OAuth 2.0? Before we can figure this out we need to review the OAuth 2.0 protocol again.
OAuth 2.0 We&amp;rsquo;ve talked a lot about the OAuth 2.</description>
    </item>
    
    <item>
      <title>Protecting Resources with Resource Server in OAuth 2.0</title>
      <link>https://www.springcloud.io/post/2022-01/spring-security-oauth2-resource-server/</link>
      <pubDate>Sat, 15 Jan 2022 17:09:53 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/spring-security-oauth2-resource-server/</guid>
      <description>Initial understanding of the resource server in OAuth 2.0 Resource Server is exactly what and how to use few tutorials to talk specifically about this stuff, today we will talk about the concept first, to lay a foundation for subsequent use. The shortcomings of the traditional security approach The traditional way to protect an application is to get the credentials (JWT is one of them) given by the server through</description>
    </item>
    
  </channel>
</rss>
