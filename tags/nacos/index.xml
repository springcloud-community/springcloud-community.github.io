<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nacos on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/nacos/</link>
    <description>Recent content in nacos on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Apr 2022 16:55:53 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/nacos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nacos Configuration Center Cluster Principle and Source Code Analysis</title>
      <link>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</link>
      <pubDate>Fri, 01 Apr 2022 16:55:53 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/nacos-principle-and-source-code/</guid>
      <description>Nacos, as a configuration center, necessarily needs to ensure high availability of service nodes, so how does Nacos implement clustering?
The following diagram, represents the deployment diagram of Nacos cluster.
How Nacos clusters work Nacos is an uncentralized node design in the cluster architecture as a configuration center. Since there are no master-slave nodes and no election mechanism, it is necessary to add virtual IPs (VIPs) in order to enable hot standby.</description>
    </item>
    
    <item>
      <title>Summary of refactoring a standalone application to Spring Cloud microservices</title>
      <link>https://www.springcloud.io/post/2022-01/standalone-2-microservice/</link>
      <pubDate>Wed, 12 Jan 2022 21:10:25 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/standalone-2-microservice/</guid>
      <description>Spent a few days to transform the project from Spring Boot monolithic project into Spring Cloud microservices. To be honest, the current volume of business is far from microservices, standalone can completely hold. But can not help the leadership above the daily urging, forget it, let&amp;rsquo;s do it.
The hardest part is not the technology The most time consuming part of switching from standalone to microservices is not in the technology upgrade.</description>
    </item>
    
  </channel>
</rss>
