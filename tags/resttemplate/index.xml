<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>resttemplate on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/resttemplate/</link>
    <description>Recent content in resttemplate on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 May 2022 17:58:00 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/resttemplate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring application with Gzip compression</title>
      <link>https://www.springcloud.io/post/2022-05/resttemplate-gzip/</link>
      <pubDate>Mon, 02 May 2022 17:58:00 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/resttemplate-gzip/</guid>
      <description>Gzip is a compression encoding format. The server often compresses the response body by this encoding and then responds to the client, thus reducing the data size, increasing the transmission speed and saving bandwidth. The client then decompresses it by Gzip to get the original data. It consumes extra CPU resources because of the compression computation required.
Http Header &amp;amp; Encoding There are many other ways to encode similar to Gzip.</description>
    </item>
    
    <item>
      <title>Complete Guide to Spring RestTemplate</title>
      <link>https://www.springcloud.io/post/2022-03/spring-resttemplate/</link>
      <pubDate>Thu, 31 Mar 2022 17:53:46 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-resttemplate/</guid>
      <description>REST-styled APIs are all around us. Many applications need to invoke REST APIs for some or all of their functions. Hence for applications to function gracefully, they need to consume APIs elegantly and consistently.
RestTemplate is a class within the Spring framework that helps us to do just that. In this tutorial, we will understand how to use RestTemplate for invoking REST APIs of different shapes.
Example Code This article is accompanied by a working code example on GitHub.</description>
    </item>
    
    <item>
      <title>Send multipart/form-data requests using Resttemplate</title>
      <link>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</link>
      <pubDate>Mon, 28 Mar 2022 15:14:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/resttemplate-multipart/</guid>
      <description>A multipart/form-data request can contain multiple sub-request bodies, each with its own separate header and body. Each sub-request body has its own separate header and body, and is typically used for file uploads. Here we use RestTemplate to send a multipart/form-data request.
RestTemplate It&amp;rsquo;s really simple, it&amp;rsquo;s all in the code.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  package io.</description>
    </item>
    
  </channel>
</rss>
