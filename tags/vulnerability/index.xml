<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vulnerability on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/vulnerability/</link>
    <description>Recent content in vulnerability on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Apr 2022 22:39:21 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/vulnerability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Framework Data Binding Rules Vulnerability (CVE-2022-22968)</title>
      <link>https://www.springcloud.io/post/2022-04/spring-framework-data-binding-rules-vulnerability/</link>
      <pubDate>Wed, 13 Apr 2022 22:39:21 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-framework-data-binding-rules-vulnerability/</guid>
      <description>Overview While investigating the Spring Framework RCE vulnerability CVE-2022-22965 and the suggested workaround, we realized that the disallowedFields configuration setting on WebDataBinder is not intuitive and is not clearly documented. We have fixed that but also decided to be on the safe side and announce a follow-up CVE, in order to ensure application developers are alerted and have a chance to review their configuration.
 CVE-2022-22968: Spring Framework Data Binding Rules Vulnerability  We have released Spring Framework 5.</description>
    </item>
    
    <item>
      <title>About Spring Core Spring Beans Remote Code Warning Notice for Execution 0day Vulnerability</title>
      <link>https://www.springcloud.io/post/2022-03/spring-0day-vulnerability/</link>
      <pubDate>Wed, 30 Mar 2022 10:06:26 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-0day-vulnerability/</guid>
      <description>Information indicates that an RCE 0day vulnerability has been reported in the Spring Framework. If the target system is developed using Spring and has a JDK version above JDK9, an unauthorized attacker can exploit this vulnerability to remotely execute arbitrary code on the target device.
1. Vulnerability Situation Analysis The Spring framework is the most widely used lightweight open source framework for Java, and in the JDK9 version of the Spring framework (and above), a remote attacker can obtain an AccessLogValve object through the framework&amp;rsquo;s parameter binding feature and use malicious field values to trigger the pipeline mechanism and write to a file in an arbitrary path if certain conditions are met.</description>
    </item>
    
    <item>
      <title>Log4j maintainer: old features that lead to vulnerabilities not removed for backward compatibility</title>
      <link>https://www.springcloud.io/post/2021-12/log4j2-vulnerability/</link>
      <pubDate>Sun, 12 Dec 2021 19:03:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/log4j2-vulnerability/</guid>
      <description>The recently disclosed remote code execution vulnerability in Apache Log4j2, a Java-based logging component, has caused significant impact worldwide. This component is used extensively in business system development to record logging information about program input and output, and is extremely widely used. In most cases, developers write error messages caused by user input to the log.
The sudden disclosure of this vulnerability has not only caused developers using Log4j2 to &amp;ldquo;fix&amp;rdquo; the problem overnight, but also caught the framework maintainers off guard.</description>
    </item>
    
    <item>
      <title>Log4J2 Vulnerability and Spring Boot</title>
      <link>https://www.springcloud.io/post/2021-12/log4j2-vulnerability-and-spring-boot/</link>
      <pubDate>Sat, 11 Dec 2021 09:55:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/log4j2-vulnerability-and-spring-boot/</guid>
      <description>As you may have seen in the news, a new zero-day exploit has been reported against the popular Log4J2 library which can allow an attacker to remotely execute code. The vulnerability has been reported with CVE-2021-44228 against the log4j-core jar and has been fixed in Log4J v2.15.0.
Spring Boot users are only affected by this vulnerability if they have switched the default logging system to Log4J2. The log4j-to-slf4j and log4j-api jars that we include in spring-boot-starter-logging cannot be exploited on their own.</description>
    </item>
    
  </channel>
</rss>
