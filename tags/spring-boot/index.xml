<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-boot on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-boot/</link>
    <description>Recent content in spring-boot on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jun 2022 09:55:57 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot With Spring Data Jpa</title>
      <link>https://www.springcloud.io/post/2022-06/springboot-jpa/</link>
      <pubDate>Wed, 08 Jun 2022 09:55:57 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-06/springboot-jpa/</guid>
      <description>This article teaches you how to quickly integrate and use Spring Data Jpa in your SpringBoot applications.
 This tutorial uses MYSQL as an example. If you use other databases, e.g. PostgreSQL, then you need to modify the jdbc driver, database, dialect and other related configurations.
 Practice Required Maven dependencies The required dependencies are as follows.
 HikariCP mysql-connector-java spring-boot-starter-data-jpa  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>It&#39;s time to get ready for Spring Boot 3.0</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-3-0/</link>
      <pubDate>Tue, 31 May 2022 08:38:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-3-0/</guid>
      <description>On February 28, 2018 Spring Boot enters the 2.0 era, more than 4 years ago. in November 2022 Spring Boot 3.0 will be officially released, it will be based on Spring Framework 6.0 and will require Java 17 or higher, and it will be the first Spring for Jakarta EE 9 Boot version for Jakarta EE 9. There are still six months left for developers to transition to Spring Boot</description>
    </item>
    
    <item>
      <title>Spring Boot 2.6 &#43; Swagger startup exception: because &#34;this.condition&#34; is null</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-swagger/</link>
      <pubDate>Thu, 26 May 2022 09:17:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-swagger/</guid>
      <description>I tried to upgrade Spring Boot version to 2.6 and got an exception on startup.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  Caused by: java.lang.NullPointerException: Cannot invoke &amp;#34;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&amp;#34; because &amp;#34;this.condition&amp;#34; is null at springfox.documentation.spring.web.WebMvcPatternsRequestConditionWrapper.getPatterns(WebMvcPatternsRequestConditionWrapper.java:56) ~[springfox-spring-webmvc-3.0.0.jar:3.0.0] at springfox.documentation.RequestHandler.sortedPaths(RequestHandler.java:113) ~[springfox-core-3.0.0.jar:3.0.0] at springfox.documentation.spi.service.contexts.Orderings.lambda$byPatternsCondition$3(Orderings.java:89) ~[springfox-spi-3.0.0.jar:3.0.0] at java.base/java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:473) ~[na:na] at java.</description>
    </item>
    
    <item>
      <title>Preparing for Spring Boot 3.0</title>
      <link>https://www.springcloud.io/post/2022-05/springboot3/</link>
      <pubDate>Wed, 25 May 2022 09:28:27 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot3/</guid>
      <description>Spring Boot 2.0 was the first release in the 2.x line and was published on Feburary 28th 2018. We&amp;rsquo;ve just released Spring Boot 2.7 which means that, so far, we&amp;rsquo;ve been maintaining the 2.x line for just over 4 years. In total we&amp;rsquo;ve published 95 distinct releases over that timeframe!
The entire Spring team, and many in our community of contributors, are nosw preparing for the next generation of Spring. We are planning to release Spring Boot 3.</description>
    </item>
    
    <item>
      <title>Several ways to execute code after SpringBoot starts</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-start-listen/</link>
      <pubDate>Sun, 22 May 2022 11:43:06 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-start-listen/</guid>
      <description>We often need to do some hook actions when the container starts, such as registering message consumers, listening to configurations, etc. Today we will summarize the 7 startup extensions that SpringBoot leaves to developers. Container refresh completion extension point 1.ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; Anyone familiar with Spring must know that a successful container refresh means that all Bean initialization has been completed, and when the container is refreshed Spring will call the onApplicationEvent</description>
    </item>
    
    <item>
      <title>Spring Boot 2.7.0 released, 2.5 no longer maintained</title>
      <link>https://www.springcloud.io/post/2022-05/sringboot-release/</link>
      <pubDate>Fri, 20 May 2022 08:26:04 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/sringboot-release/</guid>
      <description>These days are &amp;ldquo;Spring Release Days&amp;rdquo;, with many Spring artifacts releasing new versions, Spring Framework 6.0.0 released its 4th milestone release, which includes all fixes for 5.3.20, as well as 39 fixes and improvements specific to the 6.0 branch. And yesterday Spring Boot 2.7.0 and several branches of Spring Security were released, especially Spring Boot 2.7.0 which is a very important release.
Spring Boot 2.7.0 The most important thing yesterday was the release of Spring Boot 2.</description>
    </item>
    
    <item>
      <title>Spring Boot With Spring Hateoas</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-hateoas/</link>
      <pubDate>Thu, 12 May 2022 13:54:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-hateoas/</guid>
      <description>HATEOAS is a principle to achieve the REST specification, by following the HATEOAS specification, we can solve the actual code to achieve a variety of individual problems. As the most popular framework for java Spring will of course not be absent from the integration of HATEOAS.
This article will explain how to use HATEOAS in SpringBoot through a specific example.
Our goal The HATEOAS rule returns data with links. Let&amp;rsquo;s take the familiar Book example to demonstrate this HATEOAS by first creating a Book entity.</description>
    </item>
    
    <item>
      <title>SpringBoot With Gson</title>
      <link>https://www.springcloud.io/post/2022-05/springboot-gson/</link>
      <pubDate>Wed, 04 May 2022 17:35:33 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-05/springboot-gson/</guid>
      <description>Spring Boot uses Jackson by default as the serialization/deserialization framework for Json. But for me, I prefer Google&amp;rsquo;s Gson, which is much more concise. This article will teach you how to use Gson instead of Jackson in your Spring Boot application.
maven Spring Boot itself provides support for Gson, so you can import the Gson module directly without declaring a version number. If you are not using Jackson elsewhere, then you can exclude it from your project.</description>
    </item>
    
    <item>
      <title>How to set SameSite property for Cookie in SpringBoot application?</title>
      <link>https://www.springcloud.io/post/2022-04/spring-samesite/</link>
      <pubDate>Wed, 27 Apr 2022 16:33:13 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-samesite/</guid>
      <description>Starting with Chrome 51, a new SameSite attribute has been added to the browser cookie to prevent CSRF attacks and user tracking.
1. What is a CSRF attack? Cookies are often used to store a user&amp;rsquo;s identity information, and a malicious website can manage to forge an HTTP request with the correct cookie, which is a CSRF attack.
For example, a user logs into the bank&amp;rsquo;s website your-bank.com and a cookie is sent from the bank&amp;rsquo;s server.</description>
    </item>
    
    <item>
      <title>CORS detailed explanation and how to configure in spring application</title>
      <link>https://www.springcloud.io/post/2022-04/spring-cors/</link>
      <pubDate>Mon, 18 Apr 2022 16:42:22 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-cors/</guid>
      <description>CORS explained in detail CORS is a W3C standard, the full name is Cross-origin resource sharing.
It allows the browser to cross-origin server, issued XMLHttpRequest/fetch request, thus overcoming the AJAX can only be used in the same source of the limitations.
1. Introduction CORS requires both browser and server support. Currently, all browsers support this feature, and Internet Explorer cannot be lower than IE10.
The entire CORS communication process is done automatically by the browser, without user involvement.</description>
    </item>
    
    <item>
      <title>Build a Spring Boot REST API with Full-Text Search using Hibernate Search</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-hibernate-search/</link>
      <pubDate>Sat, 09 Apr 2022 22:09:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-hibernate-search/</guid>
      <description>Search is one of the pillars of the web, and full-text search is one of the mandatory features that every website needs. But implementing such a feature is complex, and lots of skilled engineers have already thought hard about this topic. So let&amp;rsquo;s not reinvent the wheel, and use the battle-tested Hibernate Search library.
In this blog post, we are going to learn how to build a simple REST API endpoint in Spring boot with full-text search using Hibernate Search.</description>
    </item>
    
    <item>
      <title>Build a Spring Boot REST API with Pagination and Sorting</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-rest/</link>
      <pubDate>Sat, 09 Apr 2022 14:34:59 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-rest/</guid>
      <description>Pagination is an important feature for REST API, and is used for many use cases where we want to fetch only a small part of an entire dataset. It might be for performance reasons, and fetch only the data needed at that time. It can also be used by the frontend to display items using a paginated view type of UI such as infinite scrolling.
Spring Boot provides a pagination feature integrated into the spring data JPA library, making it easy to integrate such a mechanism in our own REST API.</description>
    </item>
    
    <item>
      <title>Pagination(with Hateoas), Filtering &amp; Sorting with Spring Boot and JPA</title>
      <link>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</link>
      <pubDate>Sat, 09 Apr 2022 14:17:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</guid>
      <description>Introduction In this blog post we are going to look at how we can implement pagination with hateoas while supporting filtering and sorting in a spring boot application. We will first start off implementing filtering, and then iteratively page, sorting and finally pagination wtih Hateoas.
Tech Stack Below are the list of languages, frameworks and libraries used in this tutorial
 Java 11 Maven h2 in memory database REST apis SpringBoot 2.</description>
    </item>
    
    <item>
      <title>Solve the problem that SpringBoot fails to start after updating to 2.6.0</title>
      <link>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</link>
      <pubDate>Mon, 04 Apr 2022 15:11:03 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-boot-start-fail/</guid>
      <description>Problem Description SpringBoot project has integrated springfox. After updating SpringBoot to 2.6.0 the application fails to start and throws an exception: Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException.
The exception stack is as follows.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  Error starting ApplicationContext.</description>
    </item>
    
    <item>
      <title>Spring Boot integration groovy script</title>
      <link>https://www.springcloud.io/post/2022-04/spring-groovy/</link>
      <pubDate>Sat, 02 Apr 2022 14:39:17 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/spring-groovy/</guid>
      <description>Introducing scripting capabilities into our application can be a good way to improve flexibility. Our core development work can be focused on the development of core platform capabilities, and scenario-specific functionality can be implemented through scripting. For example, jenkins can write pipelines through groovy scripts, which can be very flexible to customize the build process. spring itself provides a mechanism for groovy integration, divided into two ways, one is to use groovy development program, similar to the development with java, need to be compiled.</description>
    </item>
    
    <item>
      <title>Add Prefix to All Spring Boot Controllers</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-controllers-add-prefix/</link>
      <pubDate>Wed, 30 Mar 2022 16:22:52 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-controllers-add-prefix/</guid>
      <description>1. Introduction In Spring Boot applications, every controller can have its own URL mapping. This makes it easy for a single application to provide web endpoints at multiple locations. For example, we can group our API endpoints into logic groupings such as internal and external.
However, there may be times where we want all of our endpoints under a common prefix. In this tutorial, we&amp;rsquo;ll look at different ways to use a common prefix for all Spring Boot controllers.</description>
    </item>
    
    <item>
      <title>Getting Started With GraphQL SPQR and Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-graphql/</link>
      <pubDate>Tue, 29 Mar 2022 17:24:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-graphql/</guid>
      <description>1. Introduction GraphQL is a query and manipulation language for web APIs. One of the libraries that originated to make working with GraphQL more seamless is SPQR.
In this tutorial, we&amp;rsquo;ll learn the basics of GraphQL SPQR and see it in action in a simple Spring Boot project.
2. What Is GraphQL SPQR? GraphQL is a well-known query language created by Facebook. At its core are schemas - files in which we define custom types and functions.</description>
    </item>
    
    <item>
      <title>Exposing a Helpful Info Endpoint with Spring Boot Actuator</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-info-endpoint/</link>
      <pubDate>Tue, 29 Mar 2022 15:47:28 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-info-endpoint/</guid>
      <description>In a distributed, fast-paced environment, dev teams often want to find out at what time they deployed the app, what version of the app they deployed, what Git commit was deployed, and more.
Spring Boot Actuator helps us monitor and manage the application. It exposes various endpoints that provide app health, metrics, and other relevant information.
In this article, we will find out how to use Spring Boot Actuator and the Maven/Gradle build plugins to add such information to our projects.</description>
    </item>
    
    <item>
      <title>Logging MongoDB Queries with Spring Boot</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</link>
      <pubDate>Mon, 28 Mar 2022 15:37:23 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-mongodb-logging/</guid>
      <description>1. Overview When using Spring Data MongoDB, we may need to log to a higher level than the default one. Typically, we may need to see, for example, some additional information such as statement executions or query parameters.
In this short tutorial, we&amp;rsquo;ll see how to modify the MongoDB logging level for queries.
2. Configure MongoDB Queries Logging MongoDB Support offers the MongoOperations interface or its primary MongoTemplate implementation to access data, so all we need is to configure a debug level for the MongoTemplate class.</description>
    </item>
    
    <item>
      <title>Packaging SpringBoot applications with Docker</title>
      <link>https://www.springcloud.io/post/2022-03/springboot-docker/</link>
      <pubDate>Sat, 26 Mar 2022 17:39:32 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/springboot-docker/</guid>
      <description>Previously, we used Docker to build services related to the development environment, and also to build dependency services in the development and testing environment, and then also used Nexus to build Docker&amp;rsquo;s self-service, so this time we came together to deploy SpringBoot applications with Docker. Step by step to all the Dockerization march.
Build SpringBoot project The project is relatively simple, no data interaction, no complex business, just a print statement.</description>
    </item>
    
  </channel>
</rss>
