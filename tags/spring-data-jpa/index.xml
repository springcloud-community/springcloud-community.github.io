<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-data-jpa on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/spring-data-jpa/</link>
    <description>Recent content in spring-data-jpa on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Apr 2022 15:00:43 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/spring-data-jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BootstrapMode for JPA Repositories</title>
      <link>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</link>
      <pubDate>Sun, 10 Apr 2022 15:00:43 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/jpa-bootstrap-mode/</guid>
      <description>1. Introduction In this brief tutorial, we&amp;rsquo;ll focus on the different types of BootstrapMode for JPA repositories that Spring provides for altering the orchestration of their instantiation.
At startup, Spring Data scans for repositories and registers their bean definitions as singleton-scoped beans. During their initialization, repositories obtain an EntityManager immediately. Specifically, they get the JPA metamodel and validate declared queries.
JPA is bootstrapped synchronously by default. Consequently, the instantiation of repositories is blocked until the bootstrap process completes .</description>
    </item>
    
    <item>
      <title>Pagination(with Hateoas), Filtering &amp; Sorting with Spring Boot and JPA</title>
      <link>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</link>
      <pubDate>Sat, 09 Apr 2022 14:17:48 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-04/hateoas-spring-boot-and-jpa/</guid>
      <description>Introduction In this blog post we are going to look at how we can implement pagination with hateoas while supporting filtering and sorting in a spring boot application. We will first start off implementing filtering, and then iteratively page, sorting and finally pagination wtih Hateoas.
Tech Stack Below are the list of languages, frameworks and libraries used in this tutorial
 Java 11 Maven h2 in memory database REST apis SpringBoot 2.</description>
    </item>
    
    <item>
      <title>Spring Data JPA Query Method by Multiple Columns Example</title>
      <link>https://www.springcloud.io/post/2022-03/spring-data-jpa-query-method-by-multiple-columns-example/</link>
      <pubDate>Thu, 17 Mar 2022 14:17:16 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-data-jpa-query-method-by-multiple-columns-example/</guid>
      <description>In this tutorial, we will learn how to write a Spring Data JPA query method or finder method for multiple columns/fields.
Consider the following Product entity class and if we want to retrieve products by their name OR description fields then here is the Spring data JPA query method:
1  public List&amp;lt;Product&amp;gt; findByNameOrDescription(String name, String description);   Let&amp;rsquo;s create a complete example to understand end to end.
Maven Dependencies Create a Spring boot project and add the following maven dependencies to it:</description>
    </item>
    
  </channel>
</rss>
