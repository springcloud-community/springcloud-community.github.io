<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/test/</link>
    <description>Recent content in test on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Mar 2022 16:54:51 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot Integration Testing MySQL CRUD REST API Tutorial</title>
      <link>https://www.springcloud.io/post/2022-03/spring-boot-integration-testing-mysql-crud-rest-api-tutorial/</link>
      <pubDate>Wed, 16 Mar 2022 16:54:51 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-03/spring-boot-integration-testing-mysql-crud-rest-api-tutorial/</guid>
      <description>In this tutorial, we will learn how to perform Integration testing Spring boot application using @SpringBootTest annotation.
We use MySQL database to store and retrieve the data.
Let&amp;rsquo;s first take a look at the overview of @SpringBootTest annotation.
@SpringBootTest Annotation Spring Boot provides @SpringBootTest annotation for Integration testing. This annotation creates an application context and loads the full application context.
@SpringBootTest will bootstrap the full application context, which means we can @Autowire any bean that&amp;rsquo;s picked up by component scanning into our test.</description>
    </item>
    
  </channel>
</rss>
