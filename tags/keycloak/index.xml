<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keycloak on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/keycloak/</link>
    <description>Recent content in keycloak on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Feb 2022 08:33:35 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/keycloak/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OAuth2 authorization server Keycloak announces it no longer adapts to Spring Boot and Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-announces/</link>
      <pubDate>Tue, 15 Feb 2022 08:33:35 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-announces/</guid>
      <description>On February 14, ðŸ’” the Keycloak team announced that they are deprecating most Keycloak adapters.
This includes adapters for Spring Security and Spring Boot, which means that in the future the Keycloak team will no longer provide integration solutions for Spring Security and Spring Boot.
The Keycloak project is a powerful OIDC (an extension of OAuth2) authorization server, and not even just an authorization server. It provides a number of adapters to provide an integration solution for other ecologies, but as mentioned in the official Keycloak statement.</description>
    </item>
    
    <item>
      <title>Realm in Keycloak</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-realm/</link>
      <pubDate>Thu, 10 Feb 2022 19:23:42 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-realm/</guid>
      <description>In the previous posts, I joined you for a cursory look at Keycloak. As I gradually learned more, I found that I entered a misunderstanding, originally I thought that the focus of Spring Security integration with Keycloak was on this aspect of Spring Security, in fact, I found that Keycloak has no room to work with several filters on Spring Security&amp;rsquo;s Adapter, perhaps it needs I think we need to understand Keycloak itself before we can have a breakthrough.</description>
    </item>
    
    <item>
      <title>Manage OAuth2 authentication authorization server Keycloak through the management API</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-manager-api/</link>
      <pubDate>Thu, 10 Feb 2022 13:54:40 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-manager-api/</guid>
      <description>When using Keycloak, you may have noticed that user management is done through the UI provided by Keycloak, which is convenient but often not suitable for use in development. For example, you can&amp;rsquo;t let end-users go directly to Keycloak&amp;rsquo;s Admin Console to register. Therefore, it is necessary to APIize these functions, and today we are going to share a method to operate Keycloak through programming. Introduction to Keycloak Admin Client</description>
    </item>
    
    <item>
      <title>The execution flow of an interface between Keycloak and Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-keycloak-interface/</link>
      <pubDate>Thu, 10 Feb 2022 13:45:05 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-keycloak-interface/</guid>
      <description>In the previous article we got familiar with the common configuration of Keycloak, today we will do an analysis of the execution flow of Keycloak adapted to Spring Security and briefly understand some of its customized Spring Security filters. Execution flow of /admin/foo In the Spring Boot application adapted with Keycloak and Spring Security, I wrote a /admin/foo interface and configured the permissions for this interface as follows. 1 2</description>
    </item>
    
    <item>
      <title>Common properties of Keycloak adapters</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-property/</link>
      <pubDate>Thu, 10 Feb 2022 13:38:47 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-property/</guid>
      <description>In the last Keycloak article, we successfully adapted Keycloak to Spring Security with a keycloak.json configuration. It contains quite a few properties that I feel we need to learn together as we go deeper into the process.
Common properties of Keycloak adapters realm Domain name, this is a mandatory item.
resource The application&amp;rsquo;s client_id, a unique identifier for each client registered on the Keycloak server. This is a mandatory item.</description>
    </item>
    
    <item>
      <title>Using Keycloak as an Authentication Authorization Server in Spring Security</title>
      <link>https://www.springcloud.io/post/2022-02/spring-security-keycloak/</link>
      <pubDate>Thu, 10 Feb 2022 13:18:49 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/spring-security-keycloak/</guid>
      <description>Keycloak provides adapters for popular Java applications. In previous articles, we demonstrated security protection for Spring Boot using one of the adapters. Keycloak also provides adapters for Spring Security, and in the following articles we will learn together about the use of Spring Security adapters. The installation of Keycloak can be found in the previous tutorials in the series. Adapter integration In our Spring application we integrate keycloak-spring-security-adapter. 1 2</description>
    </item>
    
    <item>
      <title>Protecting Your Spring Boot Applications with the Keycloak Authentication Authorization Platform</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-springboot/</link>
      <pubDate>Wed, 09 Feb 2022 14:09:21 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-springboot/</guid>
      <description>This article tries out the keycloak counterpart of the Spring Boot Adapter to see how keycloak protects Spring Boot applications. Client I believe many of you have used WeChat Open Platform and Ant Open Platform. First we need to register a client on these open platforms to get a set of credentials like username and password. Some of them are called appid and secret; some are called clientid and secret,</description>
    </item>
    
    <item>
      <title>Unified authentication authorization platform keycloak first experience</title>
      <link>https://www.springcloud.io/post/2022-02/keycloak-first-experience/</link>
      <pubDate>Wed, 09 Feb 2022 13:48:29 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/keycloak-first-experience/</guid>
      <description>This article will further experience Keycloak, give us an intuitive understanding of it, and then go deeper and deeper to break down its design concepts and ideas.
General idea Since we already know beforehand that Keycloak provides an adapter for Spring Security. Let&amp;rsquo;s first get the core concepts of Keycloak clear independently and then work on how it incorporates Spring Security.
Installing Keycloak  The Keycloak version for this article is 14.</description>
    </item>
    
    <item>
      <title>Unified authentication authorization platform keycloak Introduction</title>
      <link>https://www.springcloud.io/post/2022-02/intro-to-keycloak/</link>
      <pubDate>Wed, 09 Feb 2022 13:46:51 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/intro-to-keycloak/</guid>
      <description>Recently, I want to open up the user relationship of several applications and get a centralized user management system to unify the user system of the application. After some research, I selected Red Hat&amp;rsquo;s open source Keycloak, which is a very powerful unified authentication authorization management platform. The reason why Keycloak was selected is based on the following reasons.
Ease of Use Keycloak provides a one-stop single sign-on solution for web applications and Restful services.</description>
    </item>
    
  </channel>
</rss>
