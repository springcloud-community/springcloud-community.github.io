<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oidc on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/oidc/</link>
    <description>Recent content in oidc on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Feb 2022 13:11:20 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/oidc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OIDC authentication authorization protocol</title>
      <link>https://www.springcloud.io/post/2022-02/about-oidc/</link>
      <pubDate>Thu, 10 Feb 2022 13:11:20 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/about-oidc/</guid>
      <description>In the previous article we reviewed the OAuth 2.0 process with an example, and pointed out the limitations of OAuth 2.0: The client cannot identify the resource owner as the correct advocate, and while commercially available OAuth 2.0 can guarantee authorization security, OAuth 2.0 itself does not provide clear specifications for user authentication. This is where OIDC comes into play.
OIDC  OIDC is a variant of OAuth 2.0.
 OIDC (OpenID Connect) builds on the Auth 2.</description>
    </item>
    
    <item>
      <title>OAuth 2.0 is only the authorization protocol, OIDC is the authentication authorization protocol</title>
      <link>https://www.springcloud.io/post/2022-02/oauth-2-0-and-oidc/</link>
      <pubDate>Thu, 10 Feb 2022 13:03:38 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-02/oauth-2-0-and-oidc/</guid>
      <description>In the previous article we did a hands-on exercise on Keycloak protecting Spring Boot applications. We showed you how powerful Keycloak is. But in order to master Keycloak you need to understand the OpenID Connect (OIDC) protocol. OIDC is an extension of OAuth 2.0. Why does it extend OAuth 2.0? Before we can figure this out we need to review the OAuth 2.0 protocol again.
OAuth 2.0 We&amp;rsquo;ve talked a lot about the OAuth 2.</description>
    </item>
    
  </channel>
</rss>
