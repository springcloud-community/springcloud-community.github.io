<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rabbitmq on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/rabbitmq/</link>
    <description>Recent content in rabbitmq on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jan 2022 16:29:28 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot&#43;RabbitMQ for RPC calls</title>
      <link>https://www.springcloud.io/post/2022-01/springboot-rabbitmq-rpc/</link>
      <pubDate>Sat, 15 Jan 2022 16:29:28 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/springboot-rabbitmq-rpc/</guid>
      <description>When we talk about RPC (Remote Procedure Call Protocol), what pops into your mind is probably RESTful API, Dubbo, WebService, Java RMI, CORBA and so on. In fact, RabbitMQ also provides us with RPC function, and it is very easy to use. Today I&amp;rsquo;ll share with you a simple case of how to implement a simple RPC call with Spring Boot+RabbitMQ. Some readers may have misunderstandings about RabbitMQ&amp;rsquo;s implementation of</description>
    </item>
    
    <item>
      <title>Integrating Spring Cloud Stream Binder with RabbitMQ for message sending and receiving</title>
      <link>https://www.springcloud.io/post/2021-12/spring-cloud-stream-binder-rabbit/</link>
      <pubDate>Sat, 11 Dec 2021 16:17:15 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/spring-cloud-stream-binder-rabbit/</guid>
      <description>1 Preface Spring Cloud Stream is designed for event-driven microservices systems that use messaging middleware to send and receive messages. Using Spring Cloud Stream allows you to focus on business development without spending too much effort on the interaction between the application and the MQ. Also, you don&amp;rsquo;t have to make many code changes after switching to MQ.
In this article, we will integrate Spring Cloud Stream and RabbitMQ to send and receive messages.</description>
    </item>
    
    <item>
      <title>Event Driven Microservices with Spring Cloud Stream and RabbitMQ</title>
      <link>https://www.springcloud.io/post/2021-12/event-driven-microservices-with-spring-cloud-stream-and-rabbitmq/</link>
      <pubDate>Thu, 09 Dec 2021 16:40:19 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/event-driven-microservices-with-spring-cloud-stream-and-rabbitmq/</guid>
      <description>The world of microservices is dominated by REST based applications. When we talk about microservices, a natural assumption is a set of individual services talking to each other over HTTP(S) REST. But Event-Driven microservices have important and crucial roles to play in any modern, cloud-based architecture.
The usage of events to communicate application states or data is not a new concept. Organizations have been using messaging systems such as IBM MQ for several decades.</description>
    </item>
    
  </channel>
</rss>
