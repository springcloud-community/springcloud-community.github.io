<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webflux on Spring Cloud</title>
    <link>https://www.springcloud.io/tags/webflux/</link>
    <description>Recent content in webflux on Spring Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jan 2022 21:54:54 +0800</lastBuildDate><atom:link href="https://www.springcloud.io/tags/webflux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get Request object anywhere in Spring WebFlux </title>
      <link>https://www.springcloud.io/post/2022-01/webflux-get-request-anywhere/</link>
      <pubDate>Wed, 12 Jan 2022 21:54:54 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2022-01/webflux-get-request-anywhere/</guid>
      <description>A different world In a normal Spring Web project, it is very easy to get the Request object and many libraries provide static methods to get it. The code to get it is as follows.
1 2 3  ServletRequestAttributes requestAttributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes(); // get the request HttpServletRequest request = requestAttributes.getRequest();   The class RequestContextHolder provides static methods, which means you can call it from anywhere. And it uses ThreadLocal to hold the Request object, which means that different threads can get their own Request objects.</description>
    </item>
    
    <item>
      <title>Get Request object anywhere in Spring WebFlux</title>
      <link>https://www.springcloud.io/post/2021-12/get-request-object-anywhere-in-spring-webflux/</link>
      <pubDate>Thu, 16 Dec 2021 12:46:56 +0800</pubDate>
      
      <guid>https://www.springcloud.io/post/2021-12/get-request-object-anywhere-in-spring-webflux/</guid>
      <description>1 A different world In a regular Spring Web project, it is very easy to get the Request object, and quite a few libraries provide static methods to do so. The code to get it is as follows.
1 2 3  ServletRequestAttributes requestAttributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes(); // get the request HttpServletRequest request = requestAttributes.getRequest();   In class RequestContextHolder provides static methods, which means you can call them anywhere. And it uses ThreadLocal to hold the Request object, which means that different threads are able to get their own Request objects.</description>
    </item>
    
  </channel>
</rss>
